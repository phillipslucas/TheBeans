{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to thebeans","text":"<p>Python package with the beans.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://phillipslucas.github.io/thebeans</li> </ul>"},{"location":"#features","title":"Features","text":"<p>The beans is a python package developed from the bones of ipyleaflet and forged in the fire of hydrologic network analysis. With this package you can upload and interact with data in a map class and run hydrological network analysis on raster data. Some functionality may be best when run locally. The package continues to be developed and hopes to see more integration between interactive mapping and hydologic modelling in the near future.</p> <ul> <li>Create a map with a single line of code.</li> <li>Choose basemaps interactively or through code.</li> <li>Display data on the interactive map from local or online sources.</li> <li>Delineate hydrologic networks utilizing Pysheds watershed delineation tools.</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>This package helps visualize data from local or online sources. It will take raster data hosted online and delineate a watershed catchment then visualize the outputs using matplotlib plots. </p>"},{"location":"#quickstart-notebook","title":"Quickstart Notebook","text":""},{"location":"#installation-instructions","title":"Installation Instructions","text":"<p>You can install <code>thebeans</code> using pip: <pre><code>$ pip install thebeans\n</code></pre></p>"},{"location":"CSVtoDF/","title":"CSVtoDF module","text":"<p>This module imports a csv as a pandas dataframe.</p>"},{"location":"CSVtoDF/#thebeans.CSVtoDF.csv_to_df","title":"<code>csv_to_df(csv_file)</code>","text":"<p>Converts a csv file to a pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>csv</code> <code>str</code> <p>The path to the csv file.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>The pandas dataframe.</p> Source code in <code>thebeans/CSVtoDF.py</code> <pre><code>def csv_to_df(csv_file):\n    \"\"\"Converts a csv file to a pandas dataframe.\n\n    Args:\n        csv (str): The path to the csv file.\n\n    Returns:\n        pd.DataFrame: The pandas dataframe.\n    \"\"\"\n    import pandas as pd\n\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#thebeans.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>thebeans/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/phillipslucas/TheBeans/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>TheBeans could always use more documentation, whether as part of the official TheBeans docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/phillipslucas/TheBeans/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up TheBeans for local development.</p> <ol> <li> <p>Fork the TheBeans repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/TheBeans.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv TheBeans\n$ cd TheBeans/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 TheBeans tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/phillipslucas/TheBeans/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install TheBeans, run this command in your terminal:</p> <pre><code>pip install TheBeans\n</code></pre> <p>This is the preferred method to install TheBeans, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install TheBeans from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/phillipslucas/TheBeans\n</code></pre>"},{"location":"thebeans/","title":"thebeans module","text":"<p>Main module.</p>"},{"location":"thebeans/#thebeans.thebeans.Map","title":"<code> Map            (Map)         </code>","text":"<p>Map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>thebeans/thebeans.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"Map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"    \n    def __init__(self, basemap = \"OpenStreetMap\", center = (0,0), zoom = 1, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to WA [47.7511, -120.7401].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 6.\n        \"\"\"\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        #add layer control not as straight forward. Need to pass to an object and consider it as a parameter that you can pass. Ipyleaflet doesn't support.\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"add_layer_control\" not in kwargs:\n            layer_control_flag = True\n        else:\n            layer_control_flag = kwargs[\"add_layer_control\"]\n        kwargs.pop(\"add_layer_control\", None)\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        if layer_control_flag:\n            self.add_layers_control()\n            # self.grid = Grid()\n\n        #self.add_toolbar()\n\n\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add_layer(layer)\n\n\n\n    #This block means you can call up a basemap based on a string.\n    #You can call up the basemap without knowing the url\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object representing the basemap.\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n\n        Returns:\n            None\n        \"\"\"\n\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n\n\n\n    def add_layers_control(self, position='topright'):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n\n\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n            name (str, optional): The name of the layer. Defaults to \"shp\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n        Returns:\n            None\n        \"\"\"\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n\n    def add_vector(self, data, name=\"vector\", extension=None, **kwargs):\n        \"\"\"\n        Adds a vector layer to the current map.\n\n        Args:\n            data (str, GeoDataFrame, dict): The vector data as a string (path to file), GeoDataFrame, or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"vector\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is not in a supported format.\n\n        Returns:\n            None\n        \"\"\"\n        if isinstance(data, str):\n            if data.lower().endswith(('.geojson', '.json')):\n                # Load GeoJSON directly\n                with open(data) as f:\n                    data = json.load(f)\n                self.add_geojson(data, name, **kwargs)\n            elif data.lower().endswith(('.shp')):\n                # Read shapefile using GeoPandas and convert to GeoJSON\n                gdf = gpd.read_file(data)\n                self.addlayer(gdf)\n                # self.add_geojson(gdf.__geo_interface__, name, **kwargs)\n            elif extension == '.zip':\n                # Extract shapefile from zip, read it using GeoPandas and convert to GeoJSON\n                with tempfile.TemporaryDirectory() as tmp_dir:\n                    with zipfile.ZipFile(data, 'r') as zip_ref:\n                        zip_ref.extractall(tmp_dir)\n                    shapefile_name = [file for file in os.listdir(tmp_dir) if file.endswith('.shp')][0]\n                    gdf = gpd.read_file(os.path.join(tmp_dir, shapefile_name))\n                    self.add_layer(gdf)\n            else:\n                raise TypeError(\"Unsupported vector data format.\")\n        elif isinstance(data, gpd.GeoDataFrame):\n            self.add_geojson(data.__geo_interface__, name, **kwargs)\n        elif isinstance(data, dict):\n            self.add_geojson(data, name, **kwargs)\n        else:\n            raise TypeError(\"Unsupported vector data format.\")\n\n\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"\n        Adds an image to the current map.\n\n        Args:\n            url (str): The URL of the image.\n            bounds (list): The bounds of the image.\n            name (str, optional): The name of the image. Defaults to \"image\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            None\n        \"\"\"\n        import ipyleaflet\n\n        image = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=\"image\", **kwargs)\n        self.add_layer(image)\n\n\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            data (str): The path to the raster file.\n            name (str, optional): The name of the layer. Defaults to \"raster\".\n        \"\"\"\n        import localtileserver\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n        #return client to use in other functions\n        return client\n\n\n    def add_zoom_slider(self):\n        \"\"\"\n        Adds a zoom slider to the map.\n        \"\"\"\n        from ipyleaflet import WidgetControl\n\n        zoom_slider = ipyleaflet.ZoomControl(position='topright')\n        self.add_control(zoom_slider)\n\n\n\n\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to be added.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n\n\n\n    def add_opacity_slider(\n         self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider to the map.\n\n        Args:\n            layer (object): The layer to which the opacity slider is added.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description,\n            min=0,\n            max=1,\n            value=layer.opacity,\n            style={\"description_width\": \"initial\"},\n        )\n\n        def update_opacity(change):\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n        return control\n\n\n\n\n\n\n    #basemap dropdown menu widget and behavior\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n        \"\"\"\n        basemap_selector = widgets.Dropdown( \n            options= [\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n                \"NASAGIBS.ModisTerraTrueColorCR\",\n                \"NASAGIBS.ModisTerraBands367CR\",\n                \"NASAGIBS.ModisTerraBands721CR\",\n                \"NASAGIBS.ModisAquaTrueColorCR\",\n                \"NASAGIBS.ModisAquaBands721CR\",\n                \"NASAGIBS.ViirsEarthAtNight2012\",\n            ],\n            value = \"OpenStreetMap\",\n            description=\"Basemap\",\n        )\n\n        #close button for dropdown menu\n        close_button = widgets.Button(\n            description= \"\",\n            button_style = \"primary\",\n            tooltip = \"Dropdown Toggle\",\n            icon = \"times\",\n            layout = Layout(width =\"35px\") #less than 35 add noise\n        )\n\n        basebox = widgets.HBox([basemap_selector, close_button]) #widget box\n\n        #actions for buttons and button control\n        def on_click(change):\n            self.add_basemap(change[\"new\"])\n        basemap_selector.observe(on_click, \"value\")\n\n        def close_click(change):\n            basemap_selector.close()\n            close_button.close()\n\n\n        close_button.on_click(close_click)\n\n\n        control = ipyleaflet.WidgetControl(widget=basebox, position=position)\n        self.add(control)\n\n\n\n\n\n    def add_toolbar(self, position=\"topright\"): #add toolbar functionality, basemap gui button, how keep toolbar from disappearing, remove basemap widget\n        \"\"\"Adds a toolbar to the map.\n\n        Args:\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        open_button = widgets.ToggleButton(\n            value=False,\n            tooltip='Open a file',\n            icon='folder-open',\n            layout=widgets.Layout(height='28px', width='28px')\n        )\n\n\n        toolbar = widgets.VBox([toolbar_button])\n\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(\n            rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n        )\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(\n                    description=\"\",\n                    button_style=\"primary\",\n                    icon=icons[i * rows + j],\n                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n                )\n\n\n        #click signal to backend/frontend\n        def on_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(on_click, \"value\")\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n        self.add(toolbar_ctrl)\n\n        #output widget confirming button click\n        output = widgets.Output()\n        output_control = WidgetControl(widget=output, position=\"bottomright\")\n        self.add(output_control)\n\n\n\n        def toolbar_callback(change): #links to actions to buttons,\n            if change.icon == \"folder-open\": #file chooser callback\n                self.open_fileupload()\n                with output:\n                    output.clear_output()\n\n            elif change.icon == \"map\":\n                self.add_basemap_gui() #call basemap selector\n                with output:\n                    output.clear_output()\n                    print(\"change the basemap\")\n            elif change.icon == \"info\":\n                with output:\n                    output.clear_output()\n                    print(\"There is no info here.\")\n            elif change.icon == \"question\":\n                with output:\n                    output.clear_output()\n                    print(\"There is no help here.\")\n            else:\n                with output:\n                    output.clear_output()\n                    print(f\"Icon: {change.icon}\")\n\n        for tool in grid.children:\n            tool.on_click(toolbar_callback)\n\n\n    temp_files = [] #store temp files and delete on kernel restart\n    def open_fileupload(self, position=\"bottomright\"):\n        \"\"\"Handles file upload from toolbar and passes file to proper method.\n\n        Args:\n            position (str, optional): The position of the file upload control. Defaults to \"bottomright\".\n            \"\"\"\n        fileupload = widgets.FileUpload(\n            accept='',  \n            multiple=True  # True to accept multiple files upload else False\n        )\n\n        close_button = widgets.Button(\n            description= \"\",\n            button_style = \"primary\",\n            tooltip = \"Dropdown Toggle\",\n            icon = \"times\",\n            layout = Layout(width =\"35px\") #less than 35 add noise\n        )\n\n        basebox = widgets.HBox([fileupload, close_button])\n\n        # Define a function to handle file upload\n        def on_file_upload(change):\n\n            uploaded_file = change['new'][0]\n            content = uploaded_file['content'].tobytes() \n            name = uploaded_file['name']\n            extension = os.path.splitext(name)[1]\n\n            if extension == \".json\" or extension == \".geojson\":\n                data = json.loads(content.decode(\"utf-8\"))\n                self.add_vector(data)\n            elif extension == \".tif\":\n                with tempfile.NamedTemporaryFile(delete=False, suffix=\".tif\") as tmp:\n                    tmp.write(content)\n                    self.temp_files.append(tmp.name)\n                    self.add_raster(tmp.name)\n            elif extension == \".shp\" or extension == \".zip\":\n                with tempfile.NamedTemporaryFile(delete=False, suffix=extension) as tmp:\n                    tmp.write(content)\n                    self.add_vector(tmp.name, name, extension)\n                #reads zipped shapefile, pulls crs from .prj, converts to geodataframe, converts to geojson, adds to map\n                # ...grab code from add_vector...\n                #     self.add_vector(gdf)\n\n\n        # Set the function to be called when a file is uploaded\n        fileupload.observe(on_file_upload, 'value')\n\n        def close_click(change):\n            fileupload.close()\n            close_button.close()\n        close_button.on_click(close_click)\n\n        control = ipyleaflet.WidgetControl(widget=basebox, position=position)\n        self.add(control)\n\n        def cleanup(self):\n            \"\"\"Clean up the map by removing all layers and controls.\"\"\"\n            for temp_file in temp_files:\n                if os.path.exists(temp_file):\n                    os.remove(temp_file)\n        atexit.register(cleanup)   \n\n    def add_latlong_widget(self, position = \"bottomleft\"):\n        \"\"\"Adds a widget to display the latitude and longitude of the mouse pointer click.\n\n        Args:\n            position (str, optional): _description_. Defaults to \"bottomleft\".\n        \"\"\"\n        #can change min, max, height of box\n\n        #add output widget to bottom of the map\n        output = widgets.Output()\n        control = WidgetControl(widget=output, position=position)\n        self.add(control)  \n\n\n        #define function to update lat long on mouse click. Can print(kwargs) to see all info\n        #can define on double click, hover, move off map, etc\n        def update_latlon(**kwargs):\n            if kwargs.get('type') == 'mousedown':\n                latlon = kwargs.get('coordinates')\n                with output:\n                    output.clear_output()\n                    print(f\"Lat: {latlon[0]:.4f}, Long: {latlon[1]:.4f}\")\n\n        self.on_interaction(update_latlon)\n\n    def array_to_overlay(self, array, name, **kwargs):\n        \"\"\"Convert a NumPy array to an ImageOverlay and add it to the map.\"\"\"\n\n        from PIL import Image\n        from io import BytesIO\n        import base64\n        import numpy as np\n\n\n        # Convert the array to an image\n        im = Image.fromarray(np.uint8(array))\n\n        # Save the image to a BytesIO object\n        data = BytesIO()\n        im.save(data, 'PNG')\n        data.seek(0)\n\n        # Encode the BytesIO object as a base64 string\n        base64_str = \"data:image/png;base64,\" + base64.b64encode(data.read()).decode()\n\n        # Create an ImageOverlay with the base64 string as the URL\n        overlay = ImageOverlay(url=base64_str, name=name)\n\n        # Add the overlay to the map\n        self.add_layer(overlay)\n\n    def add_casual_hydrologic_network(self, url, **kwargs):\n        \"\"\"Delineate a full hydrologic network in one click. Processing times and ease of use not guaranteed.\n\n        Args:\n            url (str): The URL of the raster file.\n        \"\"\"\n        from pysheds.grid import Grid\n        import requests\n        import matplotlib.pyplot as plt\n        import matplotlib.colors as colors\n        from matplotlib import cm\n        from PIL import Image\n        from io import BytesIO\n        import base64\n        import numpy as np\n\n\n        # def normalize(array):\n        #     \"\"\"Normalize a NumPy array to the range [0, 1].\"\"\"\n        #     array = array.astype(int)  # Convert boolean arrays to integer\n        #     array_min, array_max = array.min(), array.max()\n        #     return (array - array_min) / (array_max - array_min)\n\n        # #handle array to overlay visualization\n        def array_to_image_overlay(array, name):\n                \"\"\"Convert a NumPy array to an ImageOverlay and add it to the map.\"\"\"\n                # Convert the array to an image\n                im = Image.fromarray(np.uint8(array))\n\n                # Save the image to a BytesIO object\n                data = BytesIO()\n                im.save(data, 'PNG')\n                data.seek(0)\n\n                # Encode the BytesIO object as a base64 string\n                base64_str = \"data:image/png;base64,\" + base64.b64encode(data.read()).decode()\n\n                # Create an ImageOverlay with the base64 string as the URL\n                overlay = ImageOverlay(url=base64_str, name=name)\n\n                # Add the overlay to the map\n                self.add_layer(overlay)\n\n\n\n        rasname = os.path.basename(url)\n        response = requests.get(url)\n        with open(rasname, 'wb') as f:\n            f.write(response.content)\n\n        grid = Grid.from_raster(rasname, data_name=\"dem\", set_nodata = -999999)\n        dem = grid.read_raster(rasname)\n\n        # response = requests.get(data_url)\n        # with tempfile.NamedTemporaryFile(delete=False, suffix=\".tif\") as tmp:\n        #     tmp.write(response.content)\n        #     data = tmp.name\n        #     grid = self.Grid.from_raster(data)\n        #     dem = self.read_raster(data) \n\n        #Surface Conditioning\n        fillpits = grid.fill_pits(dem)\n        filldepp = grid.fill_depressions(fillpits)\n        inflate = grid.resolve_flats(filldepp, eps=1e-12, max_iter=1e9)#default parameters too narrow for most large areas\n\n        #D8 Flow Direction\n        dirmap = (64, 128, 1, 2, 4, 8, 16, 32)\n\n        fdir = grid.flowdir(inflate, dirmap=dirmap) #fdir must be fdir\n        acc = grid.accumulation(fdir)\n\n        #pour point Methow River/Columbia River. DEFINE BY MARKER?\n        x, y = -119.912764, 48.049753\n\n        # Snap pour point to high accumulation cell\n        x_snap, y_snap = grid.snap_to_mask(acc &gt; 10000, (x, y))\n\n        catch = grid.catchment(x=x_snap, y=y_snap, fdir=fdir, dirmap=dirmap)\n        catch_view = grid.view(catch)\n\n        #assign colormap\n        # fdir = cm.viridis(normalize(fdir))\n        # acc = cm.viridis(normalize(acc))\n        # catch = cm.viridis(normalize(catch))\n\n        # Save the data as image files\n        array_to_image_overlay(fdir, 'Flow Direction')\n        array_to_image_overlay(acc, 'Accumulation')\n        array_to_image_overlay(catch, 'Catchment')\n\n        # Add each dataset as a layer to the map\n        # self.array_to_overlay(fdir, 'Flow Direction')\n        # self.array_to_overlay(acc, 'Accumulation')\n        # self.array_to_overlay(catch, 'Catchment')\n\n        #plot fdir\n        fig = plt.figure(figsize=(8,6))\n        fig.patch.set_alpha(0)\n\n        plt.imshow(fdir, extent=grid.extent, cmap='viridis', zorder=2)\n        boundaries = ([0] + sorted(list(dirmap)))\n        plt.colorbar(boundaries= boundaries,\n                    values=sorted(dirmap))\n        plt.xlabel('Longitude')\n        plt.ylabel('Latitude')\n        plt.title('Flow direction grid', size=14)\n        plt.grid(zorder=-1)\n        plt.tight_layout()\n\n        # Plot acc\n        fig, ax = plt.subplots(figsize=(8,6))\n        fig.patch.set_alpha(0)\n        im = ax.imshow(acc, zorder=2,\n                    cmap='cubehelix',\n                    norm=colors.LogNorm(1, acc.max()),\n                    interpolation='bilinear')\n        plt.colorbar(im, ax=ax, label='Upstream Cells')\n        plt.title('Flow Accumulation', size=14)\n        plt.tight_layout()\n\n        # Plot catch\n        fig, ax = plt.subplots(figsize=(8,6))\n        fig.patch.set_alpha(0)\n\n        plt.grid('on', zorder=0)\n        im = ax.imshow(np.where(catch_view, catch_view, np.nan), extent=grid.extent,\n                    zorder=1, cmap='Greys_r')\n        plt.xlabel('Longitude')\n        plt.ylabel('Latitude')\n        plt.title('Delineated Catchment', size=14)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.__init__","title":"<code>__init__(self, basemap='OpenStreetMap', center=(0, 0), zoom=1, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to WA [47.7511, -120.7401].</p> <code>(0, 0)</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 6.</p> <code>1</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def __init__(self, basemap = \"OpenStreetMap\", center = (0,0), zoom = 1, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to WA [47.7511, -120.7401].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 6.\n    \"\"\"\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    #add layer control not as straight forward. Need to pass to an object and consider it as a parameter that you can pass. Ipyleaflet doesn't support.\n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"add_layer_control\" not in kwargs:\n        layer_control_flag = True\n    else:\n        layer_control_flag = kwargs[\"add_layer_control\"]\n    kwargs.pop(\"add_layer_control\", None)\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    if layer_control_flag:\n        self.add_layers_control()\n        # self.grid = Grid()\n\n    #self.add_toolbar()\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object representing the basemap.\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n\n    Returns:\n        None\n    \"\"\"\n\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n    \"\"\"\n    basemap_selector = widgets.Dropdown( \n        options= [\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"Esri.NatGeoWorldMap\",\n            \"NASAGIBS.ModisTerraTrueColorCR\",\n            \"NASAGIBS.ModisTerraBands367CR\",\n            \"NASAGIBS.ModisTerraBands721CR\",\n            \"NASAGIBS.ModisAquaTrueColorCR\",\n            \"NASAGIBS.ModisAquaBands721CR\",\n            \"NASAGIBS.ViirsEarthAtNight2012\",\n        ],\n        value = \"OpenStreetMap\",\n        description=\"Basemap\",\n    )\n\n    #close button for dropdown menu\n    close_button = widgets.Button(\n        description= \"\",\n        button_style = \"primary\",\n        tooltip = \"Dropdown Toggle\",\n        icon = \"times\",\n        layout = Layout(width =\"35px\") #less than 35 add noise\n    )\n\n    basebox = widgets.HBox([basemap_selector, close_button]) #widget box\n\n    #actions for buttons and button control\n    def on_click(change):\n        self.add_basemap(change[\"new\"])\n    basemap_selector.observe(on_click, \"value\")\n\n    def close_click(change):\n        basemap_selector.close()\n        close_button.close()\n\n\n    close_button.on_click(close_click)\n\n\n    control = ipyleaflet.WidgetControl(widget=basebox, position=position)\n    self.add(control)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_casual_hydrologic_network","title":"<code>add_casual_hydrologic_network(self, url, **kwargs)</code>","text":"<p>Delineate a full hydrologic network in one click. Processing times and ease of use not guaranteed.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster file.</p> required Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_casual_hydrologic_network(self, url, **kwargs):\n    \"\"\"Delineate a full hydrologic network in one click. Processing times and ease of use not guaranteed.\n\n    Args:\n        url (str): The URL of the raster file.\n    \"\"\"\n    from pysheds.grid import Grid\n    import requests\n    import matplotlib.pyplot as plt\n    import matplotlib.colors as colors\n    from matplotlib import cm\n    from PIL import Image\n    from io import BytesIO\n    import base64\n    import numpy as np\n\n\n    # def normalize(array):\n    #     \"\"\"Normalize a NumPy array to the range [0, 1].\"\"\"\n    #     array = array.astype(int)  # Convert boolean arrays to integer\n    #     array_min, array_max = array.min(), array.max()\n    #     return (array - array_min) / (array_max - array_min)\n\n    # #handle array to overlay visualization\n    def array_to_image_overlay(array, name):\n            \"\"\"Convert a NumPy array to an ImageOverlay and add it to the map.\"\"\"\n            # Convert the array to an image\n            im = Image.fromarray(np.uint8(array))\n\n            # Save the image to a BytesIO object\n            data = BytesIO()\n            im.save(data, 'PNG')\n            data.seek(0)\n\n            # Encode the BytesIO object as a base64 string\n            base64_str = \"data:image/png;base64,\" + base64.b64encode(data.read()).decode()\n\n            # Create an ImageOverlay with the base64 string as the URL\n            overlay = ImageOverlay(url=base64_str, name=name)\n\n            # Add the overlay to the map\n            self.add_layer(overlay)\n\n\n\n    rasname = os.path.basename(url)\n    response = requests.get(url)\n    with open(rasname, 'wb') as f:\n        f.write(response.content)\n\n    grid = Grid.from_raster(rasname, data_name=\"dem\", set_nodata = -999999)\n    dem = grid.read_raster(rasname)\n\n    # response = requests.get(data_url)\n    # with tempfile.NamedTemporaryFile(delete=False, suffix=\".tif\") as tmp:\n    #     tmp.write(response.content)\n    #     data = tmp.name\n    #     grid = self.Grid.from_raster(data)\n    #     dem = self.read_raster(data) \n\n    #Surface Conditioning\n    fillpits = grid.fill_pits(dem)\n    filldepp = grid.fill_depressions(fillpits)\n    inflate = grid.resolve_flats(filldepp, eps=1e-12, max_iter=1e9)#default parameters too narrow for most large areas\n\n    #D8 Flow Direction\n    dirmap = (64, 128, 1, 2, 4, 8, 16, 32)\n\n    fdir = grid.flowdir(inflate, dirmap=dirmap) #fdir must be fdir\n    acc = grid.accumulation(fdir)\n\n    #pour point Methow River/Columbia River. DEFINE BY MARKER?\n    x, y = -119.912764, 48.049753\n\n    # Snap pour point to high accumulation cell\n    x_snap, y_snap = grid.snap_to_mask(acc &gt; 10000, (x, y))\n\n    catch = grid.catchment(x=x_snap, y=y_snap, fdir=fdir, dirmap=dirmap)\n    catch_view = grid.view(catch)\n\n    #assign colormap\n    # fdir = cm.viridis(normalize(fdir))\n    # acc = cm.viridis(normalize(acc))\n    # catch = cm.viridis(normalize(catch))\n\n    # Save the data as image files\n    array_to_image_overlay(fdir, 'Flow Direction')\n    array_to_image_overlay(acc, 'Accumulation')\n    array_to_image_overlay(catch, 'Catchment')\n\n    # Add each dataset as a layer to the map\n    # self.array_to_overlay(fdir, 'Flow Direction')\n    # self.array_to_overlay(acc, 'Accumulation')\n    # self.array_to_overlay(catch, 'Catchment')\n\n    #plot fdir\n    fig = plt.figure(figsize=(8,6))\n    fig.patch.set_alpha(0)\n\n    plt.imshow(fdir, extent=grid.extent, cmap='viridis', zorder=2)\n    boundaries = ([0] + sorted(list(dirmap)))\n    plt.colorbar(boundaries= boundaries,\n                values=sorted(dirmap))\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    plt.title('Flow direction grid', size=14)\n    plt.grid(zorder=-1)\n    plt.tight_layout()\n\n    # Plot acc\n    fig, ax = plt.subplots(figsize=(8,6))\n    fig.patch.set_alpha(0)\n    im = ax.imshow(acc, zorder=2,\n                cmap='cubehelix',\n                norm=colors.LogNorm(1, acc.max()),\n                interpolation='bilinear')\n    plt.colorbar(im, ax=ax, label='Upstream Cells')\n    plt.title('Flow Accumulation', size=14)\n    plt.tight_layout()\n\n    # Plot catch\n    fig, ax = plt.subplots(figsize=(8,6))\n    fig.patch.set_alpha(0)\n\n    plt.grid('on', zorder=0)\n    im = ax.imshow(np.where(catch_view, catch_view, np.nan), extent=grid.extent,\n                zorder=1, cmap='Greys_r')\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    plt.title('Delineated Catchment', size=14)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image.</p> required <code>name</code> <code>str</code> <p>The name of the image. Defaults to \"image\".</p> <code>'image'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"\n    Adds an image to the current map.\n\n    Args:\n        url (str): The URL of the image.\n        bounds (list): The bounds of the image.\n        name (str, optional): The name of the image. Defaults to \"image\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        None\n    \"\"\"\n    import ipyleaflet\n\n    image = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=\"image\", **kwargs)\n    self.add_layer(image)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_latlong_widget","title":"<code>add_latlong_widget(self, position='bottomleft')</code>","text":"<p>Adds a widget to display the latitude and longitude of the mouse pointer click.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>description. Defaults to \"bottomleft\".</p> <code>'bottomleft'</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_latlong_widget(self, position = \"bottomleft\"):\n    \"\"\"Adds a widget to display the latitude and longitude of the mouse pointer click.\n\n    Args:\n        position (str, optional): _description_. Defaults to \"bottomleft\".\n    \"\"\"\n    #can change min, max, height of box\n\n    #add output widget to bottom of the map\n    output = widgets.Output()\n    control = WidgetControl(widget=output, position=position)\n    self.add(control)  \n\n\n    #define function to update lat long on mouse click. Can print(kwargs) to see all info\n    #can define on double click, hover, move off map, etc\n    def update_latlon(**kwargs):\n        if kwargs.get('type') == 'mousedown':\n            latlon = kwargs.get('coordinates')\n            with output:\n                output.clear_output()\n                print(f\"Lat: {latlon[0]:.4f}, Long: {latlon[1]:.4f}\")\n\n    self.on_interaction(update_latlon)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_layers_control(self, position='topright'):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity', position='topright')</code>","text":"<p>Adds an opacity slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer to which the opacity slider is added.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity\".</p> <code>'Opacity'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_opacity_slider(\n     self, layer_index=-1, description=\"Opacity\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider to the map.\n\n    Args:\n        layer (object): The layer to which the opacity slider is added.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description,\n        min=0,\n        max=1,\n        value=layer.opacity,\n        style={\"description_width\": \"initial\"},\n    )\n\n    def update_opacity(change):\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n    return control\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the raster file.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"raster\".</p> <code>'raster'</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        data (str): The path to the raster file.\n        name (str, optional): The name of the layer. Defaults to \"raster\".\n    \"\"\"\n    import localtileserver\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n    #return client to use in other functions\n    return client\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string, or a dictionary representing the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is neither a string nor a dictionary representing a shapefile.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n        name (str, optional): The name of the layer. Defaults to \"shp\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n    Returns:\n        None\n    \"\"\"\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_toolbar(self, position=\"topright\"): #add toolbar functionality, basemap gui button, how keep toolbar from disappearing, remove basemap widget\n    \"\"\"Adds a toolbar to the map.\n\n    Args:\n        position (str, optional): The position of the toolbar. Defaults to \"topright\".\n    \"\"\"\n\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    open_button = widgets.ToggleButton(\n        value=False,\n        tooltip='Open a file',\n        icon='folder-open',\n        layout=widgets.Layout(height='28px', width='28px')\n    )\n\n\n    toolbar = widgets.VBox([toolbar_button])\n\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(\n        rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n    )\n\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(\n                description=\"\",\n                button_style=\"primary\",\n                icon=icons[i * rows + j],\n                layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n            )\n\n\n    #click signal to backend/frontend\n    def on_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(on_click, \"value\")\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n    self.add(toolbar_ctrl)\n\n    #output widget confirming button click\n    output = widgets.Output()\n    output_control = WidgetControl(widget=output, position=\"bottomright\")\n    self.add(output_control)\n\n\n\n    def toolbar_callback(change): #links to actions to buttons,\n        if change.icon == \"folder-open\": #file chooser callback\n            self.open_fileupload()\n            with output:\n                output.clear_output()\n\n        elif change.icon == \"map\":\n            self.add_basemap_gui() #call basemap selector\n            with output:\n                output.clear_output()\n                print(\"change the basemap\")\n        elif change.icon == \"info\":\n            with output:\n                output.clear_output()\n                print(\"There is no info here.\")\n        elif change.icon == \"question\":\n            with output:\n                output.clear_output()\n                print(\"There is no help here.\")\n        else:\n            with output:\n                output.clear_output()\n                print(f\"Icon: {change.icon}\")\n\n    for tool in grid.children:\n        tool.on_click(toolbar_callback)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_vector","title":"<code>add_vector(self, data, name='vector', extension=None, **kwargs)</code>","text":"<p>Adds a vector layer to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str, GeoDataFrame, dict</code> <p>The vector data as a string (path to file), GeoDataFrame, or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"vector\".</p> <code>'vector'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is not in a supported format.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_vector(self, data, name=\"vector\", extension=None, **kwargs):\n    \"\"\"\n    Adds a vector layer to the current map.\n\n    Args:\n        data (str, GeoDataFrame, dict): The vector data as a string (path to file), GeoDataFrame, or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"vector\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is not in a supported format.\n\n    Returns:\n        None\n    \"\"\"\n    if isinstance(data, str):\n        if data.lower().endswith(('.geojson', '.json')):\n            # Load GeoJSON directly\n            with open(data) as f:\n                data = json.load(f)\n            self.add_geojson(data, name, **kwargs)\n        elif data.lower().endswith(('.shp')):\n            # Read shapefile using GeoPandas and convert to GeoJSON\n            gdf = gpd.read_file(data)\n            self.addlayer(gdf)\n            # self.add_geojson(gdf.__geo_interface__, name, **kwargs)\n        elif extension == '.zip':\n            # Extract shapefile from zip, read it using GeoPandas and convert to GeoJSON\n            with tempfile.TemporaryDirectory() as tmp_dir:\n                with zipfile.ZipFile(data, 'r') as zip_ref:\n                    zip_ref.extractall(tmp_dir)\n                shapefile_name = [file for file in os.listdir(tmp_dir) if file.endswith('.shp')][0]\n                gdf = gpd.read_file(os.path.join(tmp_dir, shapefile_name))\n                self.add_layer(gdf)\n        else:\n            raise TypeError(\"Unsupported vector data format.\")\n    elif isinstance(data, gpd.GeoDataFrame):\n        self.add_geojson(data.__geo_interface__, name, **kwargs)\n    elif isinstance(data, dict):\n        self.add_geojson(data, name, **kwargs)\n    else:\n        raise TypeError(\"Unsupported vector data format.\")\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to be added.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to be added.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.add_zoom_slider","title":"<code>add_zoom_slider(self)</code>","text":"<p>Adds a zoom slider to the map.</p> Source code in <code>thebeans/thebeans.py</code> <pre><code>def add_zoom_slider(self):\n    \"\"\"\n    Adds a zoom slider to the map.\n    \"\"\"\n    from ipyleaflet import WidgetControl\n\n    zoom_slider = ipyleaflet.ZoomControl(position='topright')\n    self.add_control(zoom_slider)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.array_to_overlay","title":"<code>array_to_overlay(self, array, name, **kwargs)</code>","text":"<p>Convert a NumPy array to an ImageOverlay and add it to the map.</p> Source code in <code>thebeans/thebeans.py</code> <pre><code>def array_to_overlay(self, array, name, **kwargs):\n    \"\"\"Convert a NumPy array to an ImageOverlay and add it to the map.\"\"\"\n\n    from PIL import Image\n    from io import BytesIO\n    import base64\n    import numpy as np\n\n\n    # Convert the array to an image\n    im = Image.fromarray(np.uint8(array))\n\n    # Save the image to a BytesIO object\n    data = BytesIO()\n    im.save(data, 'PNG')\n    data.seek(0)\n\n    # Encode the BytesIO object as a base64 string\n    base64_str = \"data:image/png;base64,\" + base64.b64encode(data.read()).decode()\n\n    # Create an ImageOverlay with the base64 string as the URL\n    overlay = ImageOverlay(url=base64_str, name=name)\n\n    # Add the overlay to the map\n    self.add_layer(overlay)\n</code></pre>"},{"location":"thebeans/#thebeans.thebeans.Map.open_fileupload","title":"<code>open_fileupload(self, position='bottomright')</code>","text":"<p>Handles file upload from toolbar and passes file to proper method.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the file upload control. Defaults to \"bottomright\".</p> <code>'bottomright'</code> Source code in <code>thebeans/thebeans.py</code> <pre><code>def open_fileupload(self, position=\"bottomright\"):\n    \"\"\"Handles file upload from toolbar and passes file to proper method.\n\n    Args:\n        position (str, optional): The position of the file upload control. Defaults to \"bottomright\".\n        \"\"\"\n    fileupload = widgets.FileUpload(\n        accept='',  \n        multiple=True  # True to accept multiple files upload else False\n    )\n\n    close_button = widgets.Button(\n        description= \"\",\n        button_style = \"primary\",\n        tooltip = \"Dropdown Toggle\",\n        icon = \"times\",\n        layout = Layout(width =\"35px\") #less than 35 add noise\n    )\n\n    basebox = widgets.HBox([fileupload, close_button])\n\n    # Define a function to handle file upload\n    def on_file_upload(change):\n\n        uploaded_file = change['new'][0]\n        content = uploaded_file['content'].tobytes() \n        name = uploaded_file['name']\n        extension = os.path.splitext(name)[1]\n\n        if extension == \".json\" or extension == \".geojson\":\n            data = json.loads(content.decode(\"utf-8\"))\n            self.add_vector(data)\n        elif extension == \".tif\":\n            with tempfile.NamedTemporaryFile(delete=False, suffix=\".tif\") as tmp:\n                tmp.write(content)\n                self.temp_files.append(tmp.name)\n                self.add_raster(tmp.name)\n        elif extension == \".shp\" or extension == \".zip\":\n            with tempfile.NamedTemporaryFile(delete=False, suffix=extension) as tmp:\n                tmp.write(content)\n                self.add_vector(tmp.name, name, extension)\n            #reads zipped shapefile, pulls crs from .prj, converts to geodataframe, converts to geojson, adds to map\n            # ...grab code from add_vector...\n            #     self.add_vector(gdf)\n\n\n    # Set the function to be called when a file is uploaded\n    fileupload.observe(on_file_upload, 'value')\n\n    def close_click(change):\n        fileupload.close()\n        close_button.close()\n    close_button.on_click(close_click)\n\n    control = ipyleaflet.WidgetControl(widget=basebox, position=position)\n    self.add(control)\n\n    def cleanup(self):\n        \"\"\"Clean up the map by removing all layers and controls.\"\"\"\n        for temp_file in temp_files:\n            if os.path.exists(temp_file):\n                os.remove(temp_file)\n    atexit.register(cleanup)   \n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use TheBeans in a project:</p> <pre><code>import thebeans\n</code></pre>"},{"location":"Labs/lab4/","title":"Lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-02-29 08:27:13.036789\n</pre> In\u00a0[2]: Copied! <pre>name = 'luCas'\nprint(f\"Hello {name} would you like to learn how to tame snakes?\")\n</pre> name = 'luCas' print(f\"Hello {name} would you like to learn how to tame snakes?\")  <pre>Hello luCas would you like to learn how to tame snakes?\n</pre> In\u00a0[30]: Copied! <pre>name = \"Lucas\"\nprint(f\"Hello {name.lower()}.\")\nprint(f\"Hello {name.upper()}.\")\nprint(f\"Hello {name.title()}.\")\n</pre> name = \"Lucas\" print(f\"Hello {name.lower()}.\") print(f\"Hello {name.upper()}.\") print(f\"Hello {name.title()}.\") <pre>Hello lucas.\nHello LUCAS.\nHello Lucas.\n</pre> In\u00a0[4]: Copied! <pre>quote = \"No matter how tough it gets, however, I have no intention of becoming a lame duck President \u2014 unless, of course, Cheney accidentally shoots me in the leg.\"\nfamous = \"George W. Bush\"\nprint(f\"{famous} once said, \\\"{quote}\\\"\")\n</pre> quote = \"No matter how tough it gets, however, I have no intention of becoming a lame duck President \u2014 unless, of course, Cheney accidentally shoots me in the leg.\" famous = \"George W. Bush\" print(f\"{famous} once said, \\\"{quote}\\\"\") <pre>George W. Bush once said, \"No matter how tough it gets, however, I have no intention of becoming a lame duck President \u2014 unless, of course, Cheney accidentally shoots me in the leg.\"\n</pre> In\u00a0[5]: Copied! <pre>name = \"      \\tStanley Yelnats\\nTorfungus Junior\"\nprint(name)\nprint(name.rstrip())\nprint(name.rstrip())\nprint(name.strip())\n</pre> name = \"      \\tStanley Yelnats\\nTorfungus Junior\" print(name) print(name.rstrip()) print(name.rstrip()) print(name.strip()) <pre>      \tStanley Yelnats\nTorfungus Junior\n      \tStanley Yelnats\nTorfungus Junior\n      \tStanley Yelnats\nTorfungus Junior\nStanley Yelnats\nTorfungus Junior\n</pre> In\u00a0[6]: Copied! <pre>names = ['Stanley Yelnats', 'Torfungus Junior', 'Hector Zeroni', 'Magnet', 'X-Ray', 'Armpit', 'Squid', 'Zigzag', 'Barfbag', 'Twitch']\nfor name in names:\n    print(f\"{name} has been evaluated.\")\n</pre> names = ['Stanley Yelnats', 'Torfungus Junior', 'Hector Zeroni', 'Magnet', 'X-Ray', 'Armpit', 'Squid', 'Zigzag', 'Barfbag', 'Twitch'] for name in names:     print(f\"{name} has been evaluated.\") <pre>Stanley Yelnats has been evaluated.\nTorfungus Junior has been evaluated.\nHector Zeroni has been evaluated.\nMagnet has been evaluated.\nX-Ray has been evaluated.\nArmpit has been evaluated.\nSquid has been evaluated.\nZigzag has been evaluated.\nBarfbag has been evaluated.\nTwitch has been evaluated.\n</pre> In\u00a0[7]: Copied! <pre>mobility = ['mountain bike', 'electric bike', 'medium sized truck', 'sail boat', 'mule', 'pterodactyl']\nfor i in mobility:\n    print(f\"I would throw down heck of stacks of currency for a {i}.\")\n</pre> mobility = ['mountain bike', 'electric bike', 'medium sized truck', 'sail boat', 'mule', 'pterodactyl'] for i in mobility:     print(f\"I would throw down heck of stacks of currency for a {i}.\") <pre>I would throw down heck of stacks of currency for a mountain bike.\nI would throw down heck of stacks of currency for a electric bike.\nI would throw down heck of stacks of currency for a medium sized truck.\nI would throw down heck of stacks of currency for a sail boat.\nI would throw down heck of stacks of currency for a mule.\nI would throw down heck of stacks of currency for a pterodactyl.\n</pre> In\u00a0[8]: Copied! <pre>pizza = ['pepperoni', 'sausage', 'mushroom', 'onion', 'green pepper', 'black olive', 'pineapple', 'anchovy', 'quintuple cheese']\nfor i in pizza:\n    if i.endswith('e'):\n        print(f\"I like {i} pizza.\")\n    else:\n        print(f\"I like better {i} pizza.\")\n</pre> pizza = ['pepperoni', 'sausage', 'mushroom', 'onion', 'green pepper', 'black olive', 'pineapple', 'anchovy', 'quintuple cheese'] for i in pizza:     if i.endswith('e'):         print(f\"I like {i} pizza.\")     else:         print(f\"I like better {i} pizza.\") <pre>I like better pepperoni pizza.\nI like sausage pizza.\nI like better mushroom pizza.\nI like better onion pizza.\nI like better green pepper pizza.\nI like black olive pizza.\nI like pineapple pizza.\nI like better anchovy pizza.\nI like quintuple cheese pizza.\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>pizza = ['pepperoni', 'sausage', 'mushroom', 'onion', 'green pepper', 'black olive', 'pineapple', 'anchovy', 'quintuple cheese']\nfor i in pizza:\n    if i.endswith('e'):\n        print(f\"I like {i} pizza.\")\n    else:\n        print(f\"I like better {i} pizza.\")\nprint(\"\\nPizza is more important than my sibling's birthdays.\")\n</pre> pizza = ['pepperoni', 'sausage', 'mushroom', 'onion', 'green pepper', 'black olive', 'pineapple', 'anchovy', 'quintuple cheese'] for i in pizza:     if i.endswith('e'):         print(f\"I like {i} pizza.\")     else:         print(f\"I like better {i} pizza.\") print(\"\\nPizza is more important than my sibling's birthdays.\")  <pre>I like better pepperoni pizza.\nI like sausage pizza.\nI like better mushroom pizza.\nI like better onion pizza.\nI like better green pepper pizza.\nI like black olive pizza.\nI like pineapple pizza.\nI like better anchovy pizza.\nI like quintuple cheese pizza.\n\nPizza is more important then my sibling's birthdays.\n</pre> In\u00a0[10]: Copied! <pre>Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\"]\nfor i in Beasts:\n    if i == \"tiger\":\n        print(f\"Holy crap a {i.title()}\")\n    elif i == \"tiger fish\":\n        print(f\"There must be something we don't know about a {i.title()}\")\n    else:\n        print(f\"A {i.title()} is a formidable beast.\")\n</pre> Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\"] for i in Beasts:     if i == \"tiger\":         print(f\"Holy crap a {i.title()}\")     elif i == \"tiger fish\":         print(f\"There must be something we don't know about a {i.title()}\")     else:         print(f\"A {i.title()} is a formidable beast.\") <pre>A Lion is a formidable beast.\nHoly crap a Tiger\nA Bear is a formidable beast.\nThere must be something we don't know about a Tiger Fish\nA Sasquatch is a formidable beast.\nA Yeti is a formidable beast.\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[11]: Copied! <pre>Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\"]\nfor i in Beasts:\n    if i == \"tiger\":\n        print(f\"Holy crap a {i.title()}\")\n    elif i == \"tiger fish\":\n        print(f\"There must be something we don't know about a {i.title()}\")\n    else:\n        print(f\"A {i.title()} is a formidable beast.\")\n\nprint(\"\\nAll of these beasts could take a big bite out of your leg.\")\n</pre> Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\"] for i in Beasts:     if i == \"tiger\":         print(f\"Holy crap a {i.title()}\")     elif i == \"tiger fish\":         print(f\"There must be something we don't know about a {i.title()}\")     else:         print(f\"A {i.title()} is a formidable beast.\")  print(\"\\nAll of these beasts could take a big bite out of your leg.\") <pre>A Lion is a formidable beast.\nHoly crap a Tiger\nA Bear is a formidable beast.\nThere must be something we don't know about a Tiger Fish\nA Sasquatch is a formidable beast.\nA Yeti is a formidable beast.\n\nAll of these beasts could take a big bite out of your leg.\n</pre> In\u00a0[12]: Copied! <pre>import numpy\n\nnumbers = []\nfor i in range(1, 101):\n    numbers.append(i)\nprint(numbers)\nprint(\"The min is: \",min(numbers))\nprint(\"The max is: \",max(numbers))\nprint(\"The sum is: \",sum(numbers))\nprint(\"The average is: \",numpy.mean(numbers))\nprint(\"The median is: \",numpy.median(numbers))\n</pre> import numpy  numbers = [] for i in range(1, 101):     numbers.append(i) print(numbers) print(\"The min is: \",min(numbers)) print(\"The max is: \",max(numbers)) print(\"The sum is: \",sum(numbers)) print(\"The average is: \",numpy.mean(numbers)) print(\"The median is: \",numpy.median(numbers))    <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nThe min is:  1\nThe max is:  100\nThe sum is:  5050\nThe average is:  50.5\nThe median is:  50.5\n</pre> In\u00a0[13]: Copied! <pre>numbers = []\nfor i in range(1, 21, 2):\n    numbers.append(i)\nfor num in numbers:\n    print(num)\n</pre> numbers = [] for i in range(1, 21, 2):     numbers.append(i) for num in numbers:     print(num)  <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[14]: Copied! <pre>numbers = []\nfor i in range(3, 33, 3):\n    numbers.append(i)\nfor num in numbers:\n    print(num)\n</pre> numbers = [] for i in range(3, 33, 3):     numbers.append(i) for num in numbers:     print(num)  <pre>3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[15]: Copied! <pre>cubes = [n**3 for n in range(1,11)]\nprint(cubes)\n</pre> cubes = [n**3 for n in range(1,11)] print(cubes) <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n</pre> In\u00a0[16]: Copied! <pre>Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\",\"My dog Bohdi\"]\nfor i in Beasts:\n    if i == \"tiger\":\n        print(f\"Holy crap a {i.title()}\")\n    elif i == \"tiger fish\":\n        print(f\"There must be something we don't know about a {i.title()}\")\n    else:\n        print(f\"A {i.title()} is a formidable beast.\")\n\nprint(\"\\nAll of these beasts could take a big bite out of your leg.\")\n\nprint(\"\\nThe first three items in the list are:\",Beasts[:3])\n</pre> Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\",\"My dog Bohdi\"] for i in Beasts:     if i == \"tiger\":         print(f\"Holy crap a {i.title()}\")     elif i == \"tiger fish\":         print(f\"There must be something we don't know about a {i.title()}\")     else:         print(f\"A {i.title()} is a formidable beast.\")  print(\"\\nAll of these beasts could take a big bite out of your leg.\")  print(\"\\nThe first three items in the list are:\",Beasts[:3]) <pre>A Lion is a formidable beast.\nHoly crap a Tiger\nA Bear is a formidable beast.\nThere must be something we don't know about a Tiger Fish\nA Sasquatch is a formidable beast.\nA Yeti is a formidable beast.\nA My Dog Bohdi is a formidable beast.\n\nAll of these beasts could take a big bite out of your leg.\n\nThe first three items in the list are: ['lion', 'tiger', 'bear']\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[17]: Copied! <pre>Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\", \"My dog Bohdi\"]\nfor i in Beasts:\n    if i == \"tiger\":\n        print(f\"Holy crap a {i.title()}\")\n    elif i == \"tiger fish\":\n        print(f\"There must be something we don't know about a {i.title()}\")\n    else:\n        print(f\"A {i.title()} is a formidable beast.\")\n\nprint(\"\\nAll of these beasts could take a big bite out of your leg.\")\n\nprint(\"\\n\\nThe first three items in the list are:\",Beasts[:3])\n\nprint(\"\\nThe middle three items in the list are:\",Beasts[2:5])\n</pre> Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\", \"My dog Bohdi\"] for i in Beasts:     if i == \"tiger\":         print(f\"Holy crap a {i.title()}\")     elif i == \"tiger fish\":         print(f\"There must be something we don't know about a {i.title()}\")     else:         print(f\"A {i.title()} is a formidable beast.\")  print(\"\\nAll of these beasts could take a big bite out of your leg.\")  print(\"\\n\\nThe first three items in the list are:\",Beasts[:3])  print(\"\\nThe middle three items in the list are:\",Beasts[2:5]) <pre>A Lion is a formidable beast.\nHoly crap a Tiger\nA Bear is a formidable beast.\nThere must be something we don't know about a Tiger Fish\nA Sasquatch is a formidable beast.\nA Yeti is a formidable beast.\nA My Dog Bohdi is a formidable beast.\n\nAll of these beasts could take a big bite out of your leg.\n\n\nThe first three items in the list are: ['lion', 'tiger', 'bear']\n\nThe middle three items in the list are: ['bear', 'tiger fish', 'sasquatch']\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[18]: Copied! <pre>Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\", \"My dog Bohdi\"]\nfor i in Beasts:\n    if i == \"tiger\":\n        print(f\"Holy crap a {i.title()}\")\n    elif i == \"tiger fish\":\n        print(f\"There must be something we don't know about a {i.title()}\")\n    else:\n        print(f\"A {i.title()} is a formidable beast.\")\n\nprint(\"\\nAll of these beasts could take a big bite out of your leg.\")\n\nprint(\"\\n\\nThe first three items in the list are:\",Beasts[:3])\n\nprint(\"\\nThe middle three items in the list are:\",Beasts[2:5])\n\nprint(\"\\nThe last three items in the list are:\",Beasts[-3:])\n</pre> Beasts = [\"lion\", \"tiger\", \"bear\", \"tiger fish\", \"sasquatch\", \"yeti\", \"My dog Bohdi\"] for i in Beasts:     if i == \"tiger\":         print(f\"Holy crap a {i.title()}\")     elif i == \"tiger fish\":         print(f\"There must be something we don't know about a {i.title()}\")     else:         print(f\"A {i.title()} is a formidable beast.\")  print(\"\\nAll of these beasts could take a big bite out of your leg.\")  print(\"\\n\\nThe first three items in the list are:\",Beasts[:3])  print(\"\\nThe middle three items in the list are:\",Beasts[2:5])  print(\"\\nThe last three items in the list are:\",Beasts[-3:]) <pre>A Lion is a formidable beast.\nHoly crap a Tiger\nA Bear is a formidable beast.\nThere must be something we don't know about a Tiger Fish\nA Sasquatch is a formidable beast.\nA Yeti is a formidable beast.\nA My Dog Bohdi is a formidable beast.\n\nAll of these beasts could take a big bite out of your leg.\n\n\nThe first three items in the list are: ['lion', 'tiger', 'bear']\n\nThe middle three items in the list are: ['bear', 'tiger fish', 'sasquatch']\n\nThe last three items in the list are: ['sasquatch', 'yeti', 'My dog Bohdi']\n</pre> In\u00a0[19]: Copied! <pre>Fuudle = (\"pizza\", \"pasta\", \"salad\", \"bread\", \"soup\")\nfor i in Fuudle:\n    print(i)\n</pre> Fuudle = (\"pizza\", \"pasta\", \"salad\", \"bread\", \"soup\") for i in Fuudle:     print(i)      <pre>pizza\npasta\nsalad\nbread\nsoup\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[20]: Copied! <pre>Fuudle = (\"pizza\", \"pasta\", \"salad\", \"bread\", \"soup\")\nprint(Fuudle)\n\nFuudle_list = list(Fuudle)\nFuudle_list.append(\"ice cream\")\nFuudle_list[2] = \"NO MORE SALAD\"\n\nFuudle = tuple(Fuudle_list)\nfor i in Fuudle:\n    print(i)\n</pre> Fuudle = (\"pizza\", \"pasta\", \"salad\", \"bread\", \"soup\") print(Fuudle)  Fuudle_list = list(Fuudle) Fuudle_list.append(\"ice cream\") Fuudle_list[2] = \"NO MORE SALAD\"  Fuudle = tuple(Fuudle_list) for i in Fuudle:     print(i)      <pre>('pizza', 'pasta', 'salad', 'bread', 'soup')\npizza\npasta\nNO MORE SALAD\nbread\nsoup\nice cream\n</pre> In\u00a0[21]: Copied! <pre>import random\n\nalien_colors = ['green', 'yellow', 'red']\nalien_color = random.choice(alien_colors)\n\nprint(alien_color)\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n#elif alien_color != 'green':\n #   print(\"You just earned 10 points!\") \nelse:\n    pass\n</pre> import random  alien_colors = ['green', 'yellow', 'red'] alien_color = random.choice(alien_colors)  print(alien_color) if alien_color == 'green':     print(\"You just earned 5 points!\") #elif alien_color != 'green':  #   print(\"You just earned 10 points!\")  else:     pass <pre>green\nYou just earned 5 points!\n</pre> In\u00a0[22]: Copied! <pre>import random\n\nage = random.randint(1, 66)   \nprint(f\"Your are {age} years old.\")\n\nif age &lt; 2:\n    print(\"You are a baby.\")\nelif age &gt;=2 and age &lt; 4:\n    print(\"You are a toddler.\")\nelif age &gt;= 4 and age &lt; 13:\n    print(\"You are a kid.\")\nelif age &gt;=13 and age &lt; 20:\n    print(\"You are a teenager.\")\nelif age &gt;= 20 and age &lt; 65:\n    print(\"You are an adult.\")\nelse:\n    print(\"You are an elder.\")\n</pre> import random  age = random.randint(1, 66)    print(f\"Your are {age} years old.\")  if age &lt; 2:     print(\"You are a baby.\") elif age &gt;=2 and age &lt; 4:     print(\"You are a toddler.\") elif age &gt;= 4 and age &lt; 13:     print(\"You are a kid.\") elif age &gt;=13 and age &lt; 20:     print(\"You are a teenager.\") elif age &gt;= 20 and age &lt; 65:     print(\"You are an adult.\") else:     print(\"You are an elder.\")        <pre>Your are 18 years old.\nYou are a teenager.\n</pre> In\u00a0[23]: Copied! <pre>Fruits = ['apple', 'pineapple', 'spruceapple']\n\nif 'apple' in Fruits:\n    print(\"You really like apples!\")\nif 'pineapple' in Fruits:\n    print(\"You really like pineapples!\")\nif 'spruceapple' in Fruits:\n    print(\"wWhat the hell are spruceapples?\")\n</pre> Fruits = ['apple', 'pineapple', 'spruceapple']  if 'apple' in Fruits:     print(\"You really like apples!\") if 'pineapple' in Fruits:     print(\"You really like pineapples!\") if 'spruceapple' in Fruits:     print(\"wWhat the hell are spruceapples?\")   <pre>You really like apples!\nYou really like pineapples!\nwWhat the hell are spruceapples?\n</pre> In\u00a0[24]: Copied! <pre>usernames = ['admin', 'lucas', 'betterlucas', 'jane', 'lars']\n\nfor user in usernames:\n    if user == 'admin':\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {user.title()}, thank you for logging in again.\")\n</pre> usernames = ['admin', 'lucas', 'betterlucas', 'jane', 'lars']  for user in usernames:     if user == 'admin':         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {user.title()}, thank you for logging in again.\") <pre>Hello admin, would you like to see a status report?\nHello Lucas, thank you for logging in again.\nHello Betterlucas, thank you for logging in again.\nHello Jane, thank you for logging in again.\nHello Lars, thank you for logging in again.\n</pre> In\u00a0[25]: Copied! <pre>current_users = ['ADMIN', 'Lucas', 'BetterLucas', 'Jane', 'Lars', 'Rachel', 'Skunk', 'Bohdi', 'Mittens']\ncurrent_users_lower = [user.lower() for user in current_users]\nnew_users = ['Skunk', 'BOHDI', 'mittens', 'Sam', 'Burrito', 'MONSTERS']\n\nfor nuser in new_users:\n    if nuser.lower() in current_users_lower:\n        print(f\"{nuser} is taken, choose another username.\")\n    else:\n        current_users.append(nuser)\n        print(\"Welcome to the Illuminati. We crochet on Wednesdays in the old stone mason hollow under James Madison's unconfirmed third house in Puerto Rico.\")\n</pre> current_users = ['ADMIN', 'Lucas', 'BetterLucas', 'Jane', 'Lars', 'Rachel', 'Skunk', 'Bohdi', 'Mittens'] current_users_lower = [user.lower() for user in current_users] new_users = ['Skunk', 'BOHDI', 'mittens', 'Sam', 'Burrito', 'MONSTERS']  for nuser in new_users:     if nuser.lower() in current_users_lower:         print(f\"{nuser} is taken, choose another username.\")     else:         current_users.append(nuser)         print(\"Welcome to the Illuminati. We crochet on Wednesdays in the old stone mason hollow under James Madison's unconfirmed third house in Puerto Rico.\")   <pre>Skunk is taken, choose another username.\nBOHDI is taken, choose another username.\nmittens is taken, choose another username.\nWelcome to the Illuminati. We crochet on Wednesdays in the old stone mason hollow under James Madison's unconfirmed third house in Puerto Rico.\nWelcome to the Illuminati. We crochet on Wednesdays in the old stone mason hollow under James Madison's unconfirmed third house in Puerto Rico.\nWelcome to the Illuminati. We crochet on Wednesdays in the old stone mason hollow under James Madison's unconfirmed third house in Puerto Rico.\n</pre> In\u00a0[26]: Copied! <pre>num = [num for num in range(1,10)]\nprint(num)\n\nfor n in num:\n    if n ==1:\n        print('1st')\n    elif n==2:\n        print('2nd')\n    elif n == 3:\n        print('3rd')\n    else:\n        print(f'{n}th')\n</pre> num = [num for num in range(1,10)] print(num)  for n in num:     if n ==1:         print('1st')     elif n==2:         print('2nd')     elif n == 3:         print('3rd')     else:         print(f'{n}th')   <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9]\n1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"Labs/lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"Labs/lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"Labs/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"Labs/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"Labs/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"Labs/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"Labs/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"Labs/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"Labs/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"Labs/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"Labs/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"Labs/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"Labs/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"Labs/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"Labs/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"Labs/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"Labs/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"Labs/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"Labs/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"Labs/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"Labs/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"Labs/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"Labs/lab5/","title":"Lab5","text":"In\u00a0[35]: Copied! <pre>Larry = {\"first_name\": \"Larry\", \"last_name\": \"David\", \"age\": 76, \"city\": \"Los Angeles\"}\nprint(Larry[\"first_name\"])\nprint(Larry[\"last_name\"])\nprint(Larry[\"age\"])\nprint(Larry[\"city\"])\nprint(Larry)\n</pre> Larry = {\"first_name\": \"Larry\", \"last_name\": \"David\", \"age\": 76, \"city\": \"Los Angeles\"} print(Larry[\"first_name\"]) print(Larry[\"last_name\"]) print(Larry[\"age\"]) print(Larry[\"city\"]) print(Larry) <pre>Larry\nDavid\n76\nLos Angeles\n{'first_name': 'Larry', 'last_name': 'David', 'age': 76, 'city': 'Los Angeles'}\n</pre> In\u00a0[36]: Copied! <pre>F1numbers = {\"Max\": 1, \"Sergio\": 11, \"Charles\": 16, \"Lando\": 4, \"Daniel\": 3, \"Carlos\": 55, \"Sebastian\": 5, \"Lance\": 18, \"Kimi\": 7, \"Antonio\": 99, \"Pierre\": 10, \"Romain\": 8, \"Kevin\": 20, \"Nicholas\": 6, \"George\": 63, \"Alexander\": 23, \"Valtteri\": 77, \"Lewis\": 44, \"Esteban\": 31, \"Nico\": 6}\nfor key, value in F1numbers.items():\n    print(f\"{key}: {value}\")\n</pre> F1numbers = {\"Max\": 1, \"Sergio\": 11, \"Charles\": 16, \"Lando\": 4, \"Daniel\": 3, \"Carlos\": 55, \"Sebastian\": 5, \"Lance\": 18, \"Kimi\": 7, \"Antonio\": 99, \"Pierre\": 10, \"Romain\": 8, \"Kevin\": 20, \"Nicholas\": 6, \"George\": 63, \"Alexander\": 23, \"Valtteri\": 77, \"Lewis\": 44, \"Esteban\": 31, \"Nico\": 6} for key, value in F1numbers.items():     print(f\"{key}: {value}\") <pre>Max: 1\nSergio: 11\nCharles: 16\nLando: 4\nDaniel: 3\nCarlos: 55\nSebastian: 5\nLance: 18\nKimi: 7\nAntonio: 99\nPierre: 10\nRomain: 8\nKevin: 20\nNicholas: 6\nGeorge: 63\nAlexander: 23\nValtteri: 77\nLewis: 44\nEsteban: 31\nNico: 6\n</pre> In\u00a0[37]: Copied! <pre>Glossary = {\"List\": \"A collection of items in a particular order\", \"Tuple\": \"An immutable list\", \"Dictionary\": \"A collection of key-value pairs\", \"function\": \"A block of code that can be run multiple times\", \"class\": \"A blueprint for creating objects\"}\nfor key, value in Glossary.items():\n    print(f\"{key}: {value}\")\n</pre> Glossary = {\"List\": \"A collection of items in a particular order\", \"Tuple\": \"An immutable list\", \"Dictionary\": \"A collection of key-value pairs\", \"function\": \"A block of code that can be run multiple times\", \"class\": \"A blueprint for creating objects\"} for key, value in Glossary.items():     print(f\"{key}: {value}\")  <pre>List: A collection of items in a particular order\nTuple: An immutable list\nDictionary: A collection of key-value pairs\nfunction: A block of code that can be run multiple times\nclass: A blueprint for creating objects\n</pre> In\u00a0[38]: Copied! <pre>Glossary = {\"List\": \"A collection of items in a particular order\", \"Tuple\": \"An immutable list\", \"Dictionary\": \"A collection of key-value pairs\", \"function\": \"A block of code that can be run multiple times\", \"class\": \"A blueprint for creating objects\"}\nfor key, value in Glossary.items():\n    print(f\"{key}: {value}\")\n\nGlossary[\"annotation\"] = \"A label associated with a variable\"\nGlossary[\"variable\"] = \"A placeholder for a piece of data\"\nGlossary[\"loop\"] = \"A block of code that runs multiple times\"\n\nprint(\"\\n\")\nfor key, value in Glossary.items():\n    print(f\"{key}: {value}\")\n</pre> Glossary = {\"List\": \"A collection of items in a particular order\", \"Tuple\": \"An immutable list\", \"Dictionary\": \"A collection of key-value pairs\", \"function\": \"A block of code that can be run multiple times\", \"class\": \"A blueprint for creating objects\"} for key, value in Glossary.items():     print(f\"{key}: {value}\")  Glossary[\"annotation\"] = \"A label associated with a variable\" Glossary[\"variable\"] = \"A placeholder for a piece of data\" Glossary[\"loop\"] = \"A block of code that runs multiple times\"  print(\"\\n\") for key, value in Glossary.items():     print(f\"{key}: {value}\")  <pre>List: A collection of items in a particular order\nTuple: An immutable list\nDictionary: A collection of key-value pairs\nfunction: A block of code that can be run multiple times\nclass: A blueprint for creating objects\n\n\nList: A collection of items in a particular order\nTuple: An immutable list\nDictionary: A collection of key-value pairs\nfunction: A block of code that can be run multiple times\nclass: A blueprint for creating objects\nannotation: A label associated with a variable\nvariable: A placeholder for a piece of data\nloop: A block of code that runs multiple times\n</pre> In\u00a0[39]: Copied! <pre>Rio = {\"Rio Baker\": \"Chile\", \"Rio Pasqua\": \"Chile\", \"Rio Bravo\": \"Chile\"}\nfor river, country in Rio.items():\n    print(f\"The {river} runs through {country}.\")\nprint(\"I just watched a whitewater kayaking film based in Chile\")\n</pre> Rio = {\"Rio Baker\": \"Chile\", \"Rio Pasqua\": \"Chile\", \"Rio Bravo\": \"Chile\"} for river, country in Rio.items():     print(f\"The {river} runs through {country}.\") print(\"I just watched a whitewater kayaking film based in Chile\") <pre>The Rio Baker runs through Chile.\nThe Rio Pasqua runs through Chile.\nThe Rio Bravo runs through Chile.\nI just watched a whitewater kayaking film based in Chile\n</pre> In\u00a0[40]: Copied! <pre>cities = {\n    \"Santiago\": {\n        \"country\": \"Chile\", \n        \"population\": 7_000_000, \n        \"fact\": \"The capital of Chile\"\n        }, \n    \"Buenos Aires\": {\n        \"country\": \"Argentina\", \n        \"population\": 15_000_000, \n        \"fact\": \"The capital of Argentina\"\n        }, \n        \"Lima\": {\n            \"country\": \"Peru\", \n            \"population\": 10_000_000, \n            \"fact\": \"The capital of Peru\"\n        },\n}\n\nfor city, city_info in cities.items():\n    print(f\"\\n{city} is in {city_info['country']}.\")\n    print(f\"The population of {city} is {city_info['population']}.\")\n    print(f\"{city_info['fact']}.\")\n</pre> cities = {     \"Santiago\": {         \"country\": \"Chile\",          \"population\": 7_000_000,          \"fact\": \"The capital of Chile\"         },      \"Buenos Aires\": {         \"country\": \"Argentina\",          \"population\": 15_000_000,          \"fact\": \"The capital of Argentina\"         },          \"Lima\": {             \"country\": \"Peru\",              \"population\": 10_000_000,              \"fact\": \"The capital of Peru\"         }, }  for city, city_info in cities.items():     print(f\"\\n{city} is in {city_info['country']}.\")     print(f\"The population of {city} is {city_info['population']}.\")     print(f\"{city_info['fact']}.\") <pre>\nSantiago is in Chile.\nThe population of Santiago is 7000000.\nThe capital of Chile.\n\nBuenos Aires is in Argentina.\nThe population of Buenos Aires is 15000000.\nThe capital of Argentina.\n\nLima is in Peru.\nThe population of Lima is 10000000.\nThe capital of Peru.\n</pre> In\u00a0[41]: Copied! <pre>RentalCar = input(\"What kind of rental car would you like? \")\nprint(f\"Let me see if I can find you a {RentalCar}.\")\n</pre> RentalCar = input(\"What kind of rental car would you like? \") print(f\"Let me see if I can find you a {RentalCar}.\")  <pre>Let me see if I can find you a Subaru.\n</pre> In\u00a0[42]: Copied! <pre>top = input(\"How many are we seating tonight?\")\nheads = int(top)\nif heads &gt; 8:\n    print(\"Sorry there is a 4 year wait.\")\nelse:\n    print(\"We are ready to seat you.\")\n</pre> top = input(\"How many are we seating tonight?\") heads = int(top) if heads &gt; 8:     print(\"Sorry there is a 4 year wait.\") else:     print(\"We are ready to seat you.\")  <pre>Sorry there is a 4 year wait.\n</pre> In\u00a0[43]: Copied! <pre>num = input(\"Give me a number:\")\nnum = int(num)\nif num % 10 == 0:\n    print(\"That number is a multiple of 10.\")\n</pre> num = input(\"Give me a number:\") num = int(num) if num % 10 == 0:     print(\"That number is a multiple of 10.\") <pre>That number is a multiple of 10.\n</pre> In\u00a0[44]: Copied! <pre>toppings = []\n\ndef pizzatop():\n    while True:\n        top = input(\"What do you want on your pizza? (Enter 'quit' to exit)\")\n        if top.lower() == \"quit\":\n            break\n        toppings.append(top)\n    messages = [f\"We will add {topping} to your pizza.\" for topping in toppings]\n    for message in messages:\n        print(message) \npizzatop()\n</pre> toppings = []  def pizzatop():     while True:         top = input(\"What do you want on your pizza? (Enter 'quit' to exit)\")         if top.lower() == \"quit\":             break         toppings.append(top)     messages = [f\"We will add {topping} to your pizza.\" for topping in toppings]     for message in messages:         print(message)  pizzatop() <pre>We will add Garlic to your pizza.\nWe will add Pepperoni to your pizza.\nWe will add Cheese to your pizza.\nWe will add Whole Hamburgers to your pizza.\nWe will add French Fries to your pizza.\nWe will add Sausage to your pizza.\nWe will add Vacuum Debris to your pizza.\n</pre> In\u00a0[45]: Copied! <pre>learnings = []\n\ndef display_message():\n    while True:\n        message = input(\"What are you learning about this chapter? (Enter 'quit' to exit)\")\n        if message.lower() == \"quit\":\n            break\n        learnings.append(message)\n    messages = [f\"{message}.\" for message in learnings]\n    for message in messages:\n        print(message)\n\ndisplay_message()\n</pre> learnings = []  def display_message():     while True:         message = input(\"What are you learning about this chapter? (Enter 'quit' to exit)\")         if message.lower() == \"quit\":             break         learnings.append(message)     messages = [f\"{message}.\" for message in learnings]     for message in messages:         print(message)  display_message() <pre>We are learning about functions.\nWe are learning about dictionaries.\nWe are learning about user input.\nwe are learning how to link them all together.\n</pre> In\u00a0[46]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}.\")\n\n\nfavorite_book(\"The Hail Mary Project\")\n</pre> def favorite_book(title):     print(f\"One of my favorite books is {title}.\")   favorite_book(\"The Hail Mary Project\")  <pre>One of my favorite books is The Hail Mary Project.\n</pre> In\u00a0[47]: Copied! <pre>def make_shirt(size, message):\n    print(f\"We will make you a {size} shirt with the message {message}.\")\n\nmake_shirt('large', 'Sneighks')\n\nmake_shirt(message = \"Sneighks\", size = \"Lorge\")\n</pre> def make_shirt(size, message):     print(f\"We will make you a {size} shirt with the message {message}.\")  make_shirt('large', 'Sneighks')  make_shirt(message = \"Sneighks\", size = \"Lorge\") <pre>We will make you a large shirt with the message Sneighks.\nWe will make you a Lorge shirt with the message Sneighks.\n</pre> In\u00a0[48]: Copied! <pre>def make_shirt(size= \"medium\", message = \"I forgot to enter a message\"):\n    print(f\"We will make you a {size} shirt with the message {message}.\")\n\nmake_shirt('large', 'Sneighks')\n\nmake_shirt(message = \"Sneighks\", size = \"Lorge\")\n\nmake_shirt()\n</pre> def make_shirt(size= \"medium\", message = \"I forgot to enter a message\"):     print(f\"We will make you a {size} shirt with the message {message}.\")  make_shirt('large', 'Sneighks')  make_shirt(message = \"Sneighks\", size = \"Lorge\")  make_shirt() <pre>We will make you a large shirt with the message Sneighks.\nWe will make you a Lorge shirt with the message Sneighks.\nWe will make you a medium shirt with the message I forgot to enter a message.\n</pre> In\u00a0[49]: Copied! <pre>def describe_city(city = \"Rekjavik\", country = \"Ireland\"):\n    print(f\"{city} is likely in {country} but don't ask me because I'm not a geographer.\")\n\ndescribe_city('Mexico City', 'Mexico')\ndescribe_city('Rio', 'Brasil')\ndescribe_city()\n</pre> def describe_city(city = \"Rekjavik\", country = \"Ireland\"):     print(f\"{city} is likely in {country} but don't ask me because I'm not a geographer.\")  describe_city('Mexico City', 'Mexico') describe_city('Rio', 'Brasil') describe_city() <pre>Mexico City is likely in Mexico but don't ask me because I'm not a geographer.\nRio is likely in Brasil but don't ask me because I'm not a geographer.\nRekjavik is likely in Ireland but don't ask me because I'm not a geographer.\n</pre> In\u00a0[50]: Copied! <pre>def city_country(city=None, country=None):\n    if city is None:\n        city = input(\"What's your city?\")\n    if country is None:\n        country = input(\"What's it's country?\")\n    print(f\"{city}, {country}\")\n\ncity_country()\ncity_country('Moscow', 'Russia')\ncity_country(city = 'Texas', country = 'Murica')\n</pre> def city_country(city=None, country=None):     if city is None:         city = input(\"What's your city?\")     if country is None:         country = input(\"What's it's country?\")     print(f\"{city}, {country}\")  city_country() city_country('Moscow', 'Russia') city_country(city = 'Texas', country = 'Murica') <pre>Seattle, USA\nMoscow, Russia\nTexas, Murica\n</pre> In\u00a0[51]: Copied! <pre>def make_album(artist, title, tracks = None):\n    album = {'artist': artist, 'title': title}\n    if tracks:\n        album['tracks'] = tracks\n    return album\n\nprint(make_album(\"Foals\", \"Antidotes\", 10))\nprint(make_album(\"The Beach Boys\", \"Pet Sounds\"))\nprint(make_album(\"The Beatles\", \"The White Album\", 30))\n</pre> def make_album(artist, title, tracks = None):     album = {'artist': artist, 'title': title}     if tracks:         album['tracks'] = tracks     return album  print(make_album(\"Foals\", \"Antidotes\", 10)) print(make_album(\"The Beach Boys\", \"Pet Sounds\")) print(make_album(\"The Beatles\", \"The White Album\", 30)) <pre>{'artist': 'Foals', 'title': 'Antidotes', 'tracks': 10}\n{'artist': 'The Beach Boys', 'title': 'Pet Sounds'}\n{'artist': 'The Beatles', 'title': 'The White Album', 'tracks': 30}\n</pre> In\u00a0[52]: Copied! <pre>def make_album():\n    library = {}\n    while True:\n        artist = input(\"What is the artist's name? (Enter 'quit' to exit)\")\n        if artist.lower() == \"quit\":\n            break\n        album = input(\"What is the album's name? (Enter 'quit' to exit)\")\n        if album.lower() == \"quit\":\n            break\n        library[artist] = album\n        print(f\"{artist} has an album called {album}.\")\n    print(library)\n\nmake_album()\n</pre> def make_album():     library = {}     while True:         artist = input(\"What is the artist's name? (Enter 'quit' to exit)\")         if artist.lower() == \"quit\":             break         album = input(\"What is the album's name? (Enter 'quit' to exit)\")         if album.lower() == \"quit\":             break         library[artist] = album         print(f\"{artist} has an album called {album}.\")     print(library)  make_album() <pre>Foals has an album called Total Life Forever.\nEmpire of the Sun has an album called Standing on the Shore.\nMGMT has an album called Oracle Spectacular.\n{'Foals': 'Total Life Forever', 'Empire of the Sun': 'Standing on the Shore', 'MGMT': 'Oracle Spectacular'}\n</pre> In\u00a0[53]: Copied! <pre>messages = [\"I am from the future.\", \"I am from the past.\", \"I am from yesterday but angrier.\"]\n\ndef show_messages(messages):\n    for message in messages:\n        print(message)\n\nshow_messages(messages)\n</pre> messages = [\"I am from the future.\", \"I am from the past.\", \"I am from yesterday but angrier.\"]  def show_messages(messages):     for message in messages:         print(message)  show_messages(messages) <pre>I am from the future.\nI am from the past.\nI am from yesterday but angrier.\n</pre> In\u00a0[54]: Copied! <pre>messages = [\"I am from the future.\", \"I am from the past.\", \"I am from yesterday but angrier.\"]\nsent_messages = []\n\ndef send_messages(messages):\n    for message in messages:\n        sent_messages.append(message)\n        print(message)\n\nsend_messages(messages)\n\nprint(sent_messages)\nprint(messages)\n</pre> messages = [\"I am from the future.\", \"I am from the past.\", \"I am from yesterday but angrier.\"] sent_messages = []  def send_messages(messages):     for message in messages:         sent_messages.append(message)         print(message)  send_messages(messages)  print(sent_messages) print(messages) <pre>I am from the future.\nI am from the past.\nI am from yesterday but angrier.\n['I am from the future.', 'I am from the past.', 'I am from yesterday but angrier.']\n['I am from the future.', 'I am from the past.', 'I am from yesterday but angrier.']\n</pre> In\u00a0[55]: Copied! <pre>with open('learning_python.txt', 'r') as file:\n    contents = file.read()\n    print(contents)\n</pre> with open('learning_python.txt', 'r') as file:     contents = file.read()     print(contents)  <pre>In Python you can read files and run processing on them for complex visualizations.\nIn Python you can as for user input and store the data for later use.\nIn Python you can make jokes about snakes.\nIn Python you can build functions to carry out processes.\n</pre> In\u00a0[56]: Copied! <pre>with open('learning_python.txt', 'r') as file:\n    for line in file:\n        line = line.replace('Python', 'C')\n        print(line, end = '')\n</pre> with open('learning_python.txt', 'r') as file:     for line in file:         line = line.replace('Python', 'C')         print(line, end = '')           <pre>In C you can read files and run processing on them for complex visualizations.\nIn C you can as for user input and store the data for later use.\nIn C you can make jokes about snakes.\nIn C you can build functions to carry out processes.</pre> In\u00a0[57]: Copied! <pre>def write_name():\n    name = input(\"What is your name?\")\n    with open('name.txt', 'w') as file:\n        file.write(name)\n    \n    with open('name.txt', 'r') as file:\n        contents = file.read()\n    \n    return contents\n\nwrite_name()\n</pre> def write_name():     name = input(\"What is your name?\")     with open('name.txt', 'w') as file:         file.write(name)          with open('name.txt', 'r') as file:         contents = file.read()          return contents  write_name() Out[57]: <pre>'Skunk'</pre> In\u00a0[58]: Copied! <pre>while True:\n    name = input(\"What is your name? ('quit' to exit)\")\n    if name.lower() == \"quit\":\n        break\n    else:\n        print(f\"Hello {name}! Welcome to the paaaartay!\")\n        with open('guestbook.txt', 'a') as file:\n                  file.write(f\"{name}\\n\")\n\nwith open('guestbook.txt', 'r') as file:\n    contents = file.read()\n    print(contents)\n</pre> while True:     name = input(\"What is your name? ('quit' to exit)\")     if name.lower() == \"quit\":         break     else:         print(f\"Hello {name}! Welcome to the paaaartay!\")         with open('guestbook.txt', 'a') as file:                   file.write(f\"{name}\\n\")  with open('guestbook.txt', 'r') as file:     contents = file.read()     print(contents) <pre>Hello Lucas! Welcome to the paaaartay!\nHello Lucas! Welcome to the paaaartay!\nHello Lucas again! Welcome to the paaaartay!\nHello Still Lucas! Welcome to the paaaartay!\nHello I should change this prompt Lucas! Welcome to the paaaartay!\nLucas\nLucas\nLucas again\nStill Lucas\nI should change this prompt Lucas\n\n</pre> In\u00a0[59]: Copied! <pre>while True:\n    why = input(\"What do you like about programming?('quit' to exit)\")\n    if why.lower()=='quit':\n        break\n    else:\n        with open('reasons.txt', 'a') as file:\n            file.write(f\"{why}\\n\")\n\nwith open(\"reasons.txt\", \"r\") as file:\n    contents = file.read()\n    print(contents)\n</pre> while True:     why = input(\"What do you like about programming?('quit' to exit)\")     if why.lower()=='quit':         break     else:         with open('reasons.txt', 'a') as file:             file.write(f\"{why}\\n\")  with open(\"reasons.txt\", \"r\") as file:     contents = file.read()     print(contents)  <pre>I like the flexibility and visualizations\n\n</pre> In\u00a0[60]: Copied! <pre>def ask_num():\n    try:\n        num1 = int(input(\"Give me a number.\"))\n        num2 = int(input(\"Give me another number.\"))\n        total = num1 + num2\n        print(f\"Total: {total}\")\n    \n    except ValueError:\n        print(\"I SAID GIVE ME A NUMBER NOT SOMETHING THAT ISN'T A NUMBER.. kindly.\")\n\nask_num()\n</pre> def ask_num():     try:         num1 = int(input(\"Give me a number.\"))         num2 = int(input(\"Give me another number.\"))         total = num1 + num2         print(f\"Total: {total}\")          except ValueError:         print(\"I SAID GIVE ME A NUMBER NOT SOMETHING THAT ISN'T A NUMBER.. kindly.\")  ask_num()  <pre>I SAID GIVE ME A NUMBER NOT SOMETHING THAT ISN'T A NUMBER.. kindly.\n</pre> In\u00a0[61]: Copied! <pre>def ask_num():\n    while True:\n        try:\n            num1 = int(input(\"Give me a number.\"))\n            num2 = int(input(\"Give me another number.\"))\n            total = num1 + num2\n            print(f\"Total: {total}\")\n            break\n        \n        except ValueError:\n            print(\"I SAID GIVE ME A NUMBER not a not number... kindly.\")\n       \nask_num()\n</pre> def ask_num():     while True:         try:             num1 = int(input(\"Give me a number.\"))             num2 = int(input(\"Give me another number.\"))             total = num1 + num2             print(f\"Total: {total}\")             break                  except ValueError:             print(\"I SAID GIVE ME A NUMBER not a not number... kindly.\")         ask_num()  <pre>Total: 27\n</pre> In\u00a0[62]: Copied! <pre>def cats_dogs():\n    while True:\n        dogs = input(\"What dogs do you know?('quit' to exit)\")\n        if dogs.lower()=='quit':\n            break\n        else:\n            with open('_dogs_.txt', 'a') as file:\n                file.write(f\"{dogs}\\n\")\n\n    while True:            \n        cats = input(\"What cats do you know?('quit' to exit)\")\n        if cats.lower()=='quit':\n            break\n        else:\n            with open('_cats_.txt', 'a') as file:\n                file.write(f\"{cats}\\n\")\n\n    files = ['_dogs_.txt', '_cats_.txt']\n    for i in files:\n        try:\n            with open(i, 'r') as f:\n                print(f\"Reading file: {i}\")\n                print(f.read())\n        except FileNotFoundError:\n            print(f\"Bruh I cannot find {i}. It might not exist.\")\n\ncats_dogs()\n</pre> def cats_dogs():     while True:         dogs = input(\"What dogs do you know?('quit' to exit)\")         if dogs.lower()=='quit':             break         else:             with open('_dogs_.txt', 'a') as file:                 file.write(f\"{dogs}\\n\")      while True:                     cats = input(\"What cats do you know?('quit' to exit)\")         if cats.lower()=='quit':             break         else:             with open('_cats_.txt', 'a') as file:                 file.write(f\"{cats}\\n\")      files = ['_dogs_.txt', '_cats_.txt']     for i in files:         try:             with open(i, 'r') as f:                 print(f\"Reading file: {i}\")                 print(f.read())         except FileNotFoundError:             print(f\"Bruh I cannot find {i}. It might not exist.\")  cats_dogs() <pre>Reading file: _dogs_.txt\nSkunk\nBohdi\nOdessa\n\nReading file: _cats_.txt\nRocco\nBasil\nRaptor\nRocco\nBasil\nPeanut\n\n</pre> In\u00a0[63]: Copied! <pre>def cats_dogs():\n    while True:\n        dogs = input(\"What dogs do you know?('quit' to exit)\")\n        if dogs.lower()=='quit':\n            break\n        else:\n            with open('_dogs_.txt', 'a') as file:\n                file.write(f\"{dogs}\\n\")\n\n    while True:            \n        cats = input(\"What cats do you know?('quit' to exit)\")\n        if cats.lower()=='quit':\n            break\n        else:\n            with open('_cats_.txt', 'a') as file:\n                file.write(f\"{cats}\\n\")\n\n    files = ['_dogs_.txt', '_cats_.txt']\n    for i in files:\n        try:\n            with open(i, 'r') as f:\n                print(f\"Reading file: {i}\")\n                print(f.read())\n        except FileNotFoundError:\n            pass\n\ncats_dogs()\n</pre> def cats_dogs():     while True:         dogs = input(\"What dogs do you know?('quit' to exit)\")         if dogs.lower()=='quit':             break         else:             with open('_dogs_.txt', 'a') as file:                 file.write(f\"{dogs}\\n\")      while True:                     cats = input(\"What cats do you know?('quit' to exit)\")         if cats.lower()=='quit':             break         else:             with open('_cats_.txt', 'a') as file:                 file.write(f\"{cats}\\n\")      files = ['_dogs_.txt', '_cats_.txt']     for i in files:         try:             with open(i, 'r') as f:                 print(f\"Reading file: {i}\")                 print(f.read())         except FileNotFoundError:             pass  cats_dogs() <pre>Reading file: _dogs_.txt\nSkunk\nBohdi\nOdessa\n\nReading file: _cats_.txt\nRocco\nBasil\nRaptor\nRocco\nBasil\nPeanut\n\n</pre> In\u00a0[64]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[64]: <pre>2</pre> In\u00a0[65]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[65]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[67]: Copied! <pre># I had to remove both the .txt files from my Labs because Codespell found too many errors and failed (error 65) with them in the repo.\n# I ran the code, deleted the files, and committed the changes so if this runs again it'll run the exception.\n\n\ntextfiles = [\"MobyDick.txt\", \"TaleOfTwoCities.txt\"]\n\ndef count_the():\n    for file in textfiles:\n        try:\n            with open(file, 'r') as f:\n                contents = f.read()\n        except FileNotFoundError:\n            print(f\"Sorry, the {file} has not been found.\")\n            continue\n\n        word1 = \"the\"    \n        count = contents.count(word1)\n        print(f\"The word: {word1}, appears {count} times in {file} \")\n        \n        word2 = \"the\"    \n        count = contents.lower().count(word2)\n        print(f\"The word: {word2}, appears {count} times in {file} \")\n\n        word3 = \"the \"    \n        count = contents.lower().count(word3)\n        print(f\"The word: {word3}, appears {count} times in {file} \")\n        \ncount_the()\n</pre> # I had to remove both the .txt files from my Labs because Codespell found too many errors and failed (error 65) with them in the repo. # I ran the code, deleted the files, and committed the changes so if this runs again it'll run the exception.   textfiles = [\"MobyDick.txt\", \"TaleOfTwoCities.txt\"]  def count_the():     for file in textfiles:         try:             with open(file, 'r') as f:                 contents = f.read()         except FileNotFoundError:             print(f\"Sorry, the {file} has not been found.\")             continue          word1 = \"the\"             count = contents.count(word1)         print(f\"The word: {word1}, appears {count} times in {file} \")                  word2 = \"the\"             count = contents.lower().count(word2)         print(f\"The word: {word2}, appears {count} times in {file} \")          word3 = \"the \"             count = contents.lower().count(word3)         print(f\"The word: {word3}, appears {count} times in {file} \")          count_the()  <pre>The word: the, appears 19060 times in MobyDick.txt \nThe word: the, appears 20139 times in MobyDick.txt \nThe word: the , appears 13317 times in MobyDick.txt \nThe word: the, appears 10706 times in TaleOfTwoCities.txt \nThe word: the, appears 11695 times in TaleOfTwoCities.txt \nThe word: the , appears 7543 times in TaleOfTwoCities.txt \n</pre>"},{"location":"Labs/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"Labs/lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"Labs/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"Labs/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"Labs/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"Labs/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"Labs/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"Labs/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"Labs/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"Labs/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"Labs/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"Labs/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"Labs/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"Labs/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"Labs/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"Labs/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"Labs/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"Labs/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"Labs/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"Labs/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"Labs/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"Labs/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"Labs/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"Labs/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"Labs/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"Labs/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"Labs/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"Labs/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"Labs/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"Labs/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"Labs/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"Labs/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"examples/ExampleBeans/","title":"ExampleBeans","text":"In\u00a0[1]: Copied! <pre>import thebeans\n</pre> import thebeans  In\u00a0[2]: Copied! <pre>#thebeans default map\n\nm = thebeans.Map()\nm\n</pre> #thebeans default map  m = thebeans.Map() m Out[2]: <pre>Map(center=[48.513, -120.218], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zo\u2026</pre> In\u00a0[3]: Copied! <pre>#Get layer info from map\nm.layers\n</pre> #Get layer info from map m.layers   Out[3]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),)</pre> In\u00a0[4]: Copied! <pre>#Change Basemap\n#the beans allows passing text directly bypassing ipyleaflet formatting for stock ipyleaflet basemaps\nm.add_basemap(\"Strava.Run\")\n#m.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\")\nm\n</pre> #Change Basemap #the beans allows passing text directly bypassing ipyleaflet formatting for stock ipyleaflet basemaps m.add_basemap(\"Strava.Run\") #m.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\") m  Out[4]: <pre>Map(center=[48.513, -120.218], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zo\u2026</pre> In\u00a0[5]: Copied! <pre>#thebeans also allows passing just a URL as a tile layer\n\nurl = \"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\"\nm.add_tile_layer(url, \"Google Hybrid\")\nm\n</pre> #thebeans also allows passing just a URL as a tile layer  url = \"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\" m.add_tile_layer(url, \"Google Hybrid\") m Out[5]: <pre>Map(center=[48.513, -120.218], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zo\u2026</pre> In\u00a0[6]: Copied! <pre>m.layers\n</pre> m.layers Out[6]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n TileLayer(name='Strava.Run', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://heatmap-external-a.strava.com/tiles/run/bluered/{z}/{x}/{y}.png'),\n TileLayer(name='Google Hybrid', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}'))</pre> In\u00a0[7]: Copied! <pre>m.clear_layers() #clears all layers\n\nm.add_basemap(\"OpenTopoMap\")\nm\n</pre> m.clear_layers() #clears all layers  m.add_basemap(\"OpenTopoMap\") m Out[7]: <pre>Map(bottom=3030.0, center=[48.513, -120.218], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom\u2026</pre> In\u00a0[8]: Copied! <pre>#thebeans abides by the geojson visualizer format\n\n#local = r\"C:\\Users\\phill\\Downloads\\us_regions.geojson\"\n#url = \"https://github.com/opengeos/datasets/releases/download/us/us_regions.geojson\"\n\nm.add_geojson('StudyArea.geojson', \n              \"Study Area\", \n              style = {\n                \"color\": \"yellow\",\n                \"weight\": 2,\n                \"opacity\": 0.8,\n                \"dashArray\": \"9\",\n})\nm\n</pre> #thebeans abides by the geojson visualizer format  #local = r\"C:\\Users\\phill\\Downloads\\us_regions.geojson\" #url = \"https://github.com/opengeos/datasets/releases/download/us/us_regions.geojson\"  m.add_geojson('StudyArea.geojson',                \"Study Area\",                style = {                 \"color\": \"yellow\",                 \"weight\": 2,                 \"opacity\": 0.8,                 \"dashArray\": \"9\", }) m Out[8]: <pre>Map(bottom=3030.0, center=[48.513, -120.218], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom\u2026</pre> In\u00a0[14]: Copied! <pre>#add shapefiles\nm.add_shp(\"https://github.com/phillipslucas/TheBeans/blob/main/docs/examples/shp/CedarCubMuck.shp\", \"Burn Scars\")\n</pre> #add shapefiles m.add_shp(\"https://github.com/phillipslucas/TheBeans/blob/main/docs/examples/shp/CedarCubMuck.shp\", \"Burn Scars\") <pre>\n---------------------------------------------------------------------------\nShapefileException                        Traceback (most recent call last)\nCell In[14], line 2\n      1 #add shapefiles\n----&gt; 2 m.add_shp(\"https://github.com/phillipslucas/TheBeans/blob/main/docs/examples/shp/CedarCubMuck.shp\", \"Burn Scars\")\n\nFile ~\\Documents\\Repositories\\TheBeans\\thebeans\\thebeans.py:132, in Map.add_shp(self, data, name, **kwargs)\n    129 import json\n    131 if isinstance(data, str):\n--&gt; 132     with shapefile.Reader(data) as shp:\n    133         data = shp.__geo_interface__\n    135 self.add_geojson(data, name, **kwargs)\n\nFile c:\\Users\\phill\\miniconda3\\envs\\geo\\Lib\\site-packages\\shapefile.py:1040, in Reader.__init__(self, *args, **kwargs)\n   1037         pass\n   1038 if (self.shp or self.dbf):\n   1039     # Load and exit early\n-&gt; 1040     self.load()\n   1041     return\n   1042 else:\n\nFile c:\\Users\\phill\\miniconda3\\envs\\geo\\Lib\\site-packages\\shapefile.py:1197, in Reader.load(self, shapefile)\n   1195     self.__shpHeader()\n   1196 if self.dbf:\n-&gt; 1197     self.__dbfHeader()\n   1198 if self.shx:\n   1199     self.__shxHeader()\n\nFile c:\\Users\\phill\\miniconda3\\envs\\geo\\Lib\\site-packages\\shapefile.py:1532, in Reader.__dbfHeader(self)\n   1530 terminator = dbf.read(1)\n   1531 if terminator != b\"\\r\":\n-&gt; 1532     raise ShapefileException(\"Shapefile dbf header lacks expected terminator. (likely corrupt?)\")\n   1534 # insert deletion field at start\n   1535 self.fields.insert(0, ('DeletionFlag', 'C', 1, 0))\n\nShapefileException: Shapefile dbf header lacks expected terminator. (likely corrupt?)</pre> In\u00a0[\u00a0]: Copied! <pre>add vector\n</pre> add vector In\u00a0[\u00a0]: Copied! <pre>add raster\n</pre> add raster"},{"location":"examples/Lab9_Toolbar/","title":"Lab9 Toolbar","text":"In\u00a0[1]: Copied! <pre>import thebeans\nimport leafmap\n\n\n#Create a map\nm = thebeans.Map()\n\n#add toolbar using the add_toolbar function\n#explore the buttons at your leisure\nm.add_toolbar()\n\n\n\nm\n</pre> import thebeans import leafmap   #Create a map m = thebeans.Map()  #add toolbar using the add_toolbar function #explore the buttons at your leisure m.add_toolbar()    m Out[1]: <pre>Map(center=[0, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text'\u2026</pre> In\u00a0[2]: Copied! <pre>m.add_latlong_widget()\n</pre> m.add_latlong_widget() In\u00a0[\u00a0]: Copied! <pre>def user_roi_bounds(self, decimals=4):\n        \"\"\"Get the bounds of the user drawn ROI as a tuple of (minx, miny, maxx, maxy).\n\n        Args:\n            decimals (int, optional): The number of decimals to round the coordinates to. Defaults to 4.\n\n        Returns:\n            list: The bounds of the user drawn ROI as a tuple of (minx, miny, maxx, maxy).\n        \"\"\"\n        if self.user_roi is not None:\n            return geometry_bounds(self.user_roi, decimals=decimals)\n        else:\n            return None\n</pre>   def user_roi_bounds(self, decimals=4):         \"\"\"Get the bounds of the user drawn ROI as a tuple of (minx, miny, maxx, maxy).          Args:             decimals (int, optional): The number of decimals to round the coordinates to. Defaults to 4.          Returns:             list: The bounds of the user drawn ROI as a tuple of (minx, miny, maxx, maxy).         \"\"\"         if self.user_roi is not None:             return geometry_bounds(self.user_roi, decimals=decimals)         else:             return None In\u00a0[\u00a0]: Copied! <pre>def get_bbox(self):\n        \"\"\"Get the bounds of the map as a list of [(]minx, miny, maxx, maxy].\n\n        Returns:\n            list: The bounds of the map as a list of [(]minx, miny, maxx, maxy].\n        \"\"\"\n        bounds = self.bounds\n        bbox = [bounds[0][1], bounds[0][0], bounds[1][1], bounds[1][0]]\n        return bbox\n</pre>      def get_bbox(self):         \"\"\"Get the bounds of the map as a list of [(]minx, miny, maxx, maxy].          Returns:             list: The bounds of the map as a list of [(]minx, miny, maxx, maxy].         \"\"\"         bounds = self.bounds         bbox = [bounds[0][1], bounds[0][0], bounds[1][1], bounds[1][0]]         return bbox In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>def split_map(\n    left_layer=\"TERRAIN\",\n    right_layer=\"OpenTopoMap\",\n    left_args={},\n    right_args={},\n    **kwargs,\n):\n    \"\"\"Adds split map.\n\n    Args:\n        left_layer (str, optional): The left tile layer. Can be a local file path, HTTP URL, or a basemap name. Defaults to 'TERRAIN'.\n        right_layer (str, optional): The right tile layer. Can be a local file path, HTTP URL, or a basemap name. Defaults to 'OpenTopoMap'.\n        left_args (dict, optional): The arguments for the left tile layer. Defaults to {}.\n        right_args (dict, optional): The arguments for the right tile layer. Defaults to {}.\n        kwargs (dict, optional): The arguments for the Map widget. Defaults to {}.\n    \"\"\"\n\n    if \"draw_control\" not in kwargs:\n        kwargs[\"draw_control\"] = False\n    if \"toolbar_control\" not in kwargs:\n        kwargs[\"toolbar_control\"] = False\n    if \"measure_control\" not in kwargs:\n        kwargs[\"measure_control\"] = False\n    if \"fullscreen_control\" not in kwargs:\n        kwargs[\"fullscreen_control\"] = False\n    if \"scale_control\" not in kwargs:\n        kwargs[\"scale_control\"] = False\n    if \"search_control\" not in kwargs:\n        kwargs[\"search_control\"] = False\n\n    m = Map(**kwargs)\n\n    if \"max_zoom\" not in left_args:\n        left_args[\"max_zoom\"] = 30\n    if \"max_native_zoom\" not in left_args:\n        left_args[\"max_native_zoom\"] = 30\n\n    if \"max_zoom\" not in right_args:\n        right_args[\"max_zoom\"] = 30\n    if \"max_native_zoom\" not in right_args:\n        right_args[\"max_native_zoom\"] = 30\n\n    if \"layer_name\" not in left_args:\n        left_args[\"layer_name\"] = \"Left Layer\"\n\n    if \"layer_name\" not in right_args:\n        right_args[\"layer_name\"] = \"Right Layer\"\n\n    bounds = None\n\n    try:\n        if left_layer in basemaps.keys():\n            left_layer = get_basemap(left_layer)\n        elif isinstance(left_layer, str):\n            if left_layer.startswith(\"http\") and left_layer.endswith(\".tif\"):\n                url = cog_tile(left_layer, **left_args)\n                bbox = cog_bounds(left_layer)\n                bounds = [(bbox[1], bbox[0]), (bbox[3], bbox[2])]\n                left_layer = ipyleaflet.TileLayer(\n                    url=url,\n                    name=\"Left Layer\",\n                    attribution=\" \",\n                )\n            elif left_layer.startswith(\"http\") and left_layer.endswith(\".geojson\"):\n                if \"max_zoom\" in left_args:\n                    del left_args[\"max_zoom\"]\n                if \"max_native_zoom\" in left_args:\n                    del left_args[\"max_native_zoom\"]\n                left_layer = geojson_layer(left_layer, **left_args)\n            elif os.path.exists(left_layer):\n                if left_layer.endswith(\".geojson\"):\n                    if \"max_zoom\" in left_args:\n                        del left_args[\"max_zoom\"]\n                    if \"max_native_zoom\" in left_args:\n                        del left_args[\"max_native_zoom\"]\n                    left_layer = geojson_layer(left_layer, **left_args)\n                else:\n                    left_layer, left_client = get_local_tile_layer(\n                        left_layer,\n                        tile_format=\"ipyleaflet\",\n                        return_client=True,\n                        **left_args,\n                    )\n                    bounds = image_bounds(left_client)\n            else:\n                left_layer = ipyleaflet.TileLayer(\n                    url=left_layer,\n                    name=\"Left Layer\",\n                    attribution=\" \",\n                    **left_args,\n                )\n        elif isinstance(left_layer, ipyleaflet.TileLayer) or isinstance(\n            left_layer, ipyleaflet.GeoJSON\n        ):\n            pass\n        else:\n            raise ValueError(\n                f\"left_layer must be one of the following: {', '.join(basemaps.keys())} or a string url to a tif file.\"\n            )\n\n        if right_layer in basemaps.keys():\n            right_layer = get_basemap(right_layer)\n        elif isinstance(right_layer, str):\n            if right_layer.startswith(\"http\") and right_layer.endswith(\".tif\"):\n                url = cog_tile(\n                    right_layer,\n                    **right_args,\n                )\n                bbox = cog_bounds(right_layer)\n                bounds = [(bbox[1], bbox[0]), (bbox[3], bbox[2])]\n                right_layer = ipyleaflet.TileLayer(\n                    url=url,\n                    name=\"Right Layer\",\n                    attribution=\" \",\n                )\n            elif right_layer.startswith(\"http\") and right_layer.endswith(\".geojson\"):\n                if \"max_zoom\" in right_args:\n                    del right_args[\"max_zoom\"]\n                if \"max_native_zoom\" in right_args:\n                    del right_args[\"max_native_zoom\"]\n                right_layer = geojson_layer(right_layer, **right_args)\n            elif os.path.exists(right_layer):\n                if \"max_zoom\" in right_args:\n                    del right_args[\"max_zoom\"]\n                if \"max_native_zoom\" in right_args:\n                    del right_args[\"max_native_zoom\"]\n                if right_layer.endswith(\".geojson\"):\n                    right_layer = geojson_layer(right_layer, **right_args)\n                else:\n                    right_layer, right_client = get_local_tile_layer(\n                        right_layer,\n                        tile_format=\"ipyleaflet\",\n                        return_client=True,\n                        **right_args,\n                    )\n                    bounds = image_bounds(right_client)\n            else:\n                right_layer = ipyleaflet.TileLayer(\n                    url=right_layer,\n                    name=\"Right Layer\",\n                    attribution=\" \",\n                    **right_args,\n                )\n        elif isinstance(right_layer, ipyleaflet.TileLayer) or isinstance(\n            right_layer, ipyleaflet.GeoJSON\n        ):\n            pass\n        else:\n            raise ValueError(\n                f\"right_layer must be one of the following: {', '.join(basemaps.keys())} or a string url to a tif file.\"\n            )\n        control = ipyleaflet.SplitMapControl(\n            left_layer=left_layer, right_layer=right_layer\n        )\n        m.add(control)\n        if bounds is not None:\n            m.fit_bounds(bounds)\n        m.dragging = False\n        return m\n\n    except Exception as e:\n        print(\"The provided layers are invalid!\")\n        raise ValueError(e)\n</pre> def split_map(     left_layer=\"TERRAIN\",     right_layer=\"OpenTopoMap\",     left_args={},     right_args={},     **kwargs, ):     \"\"\"Adds split map.      Args:         left_layer (str, optional): The left tile layer. Can be a local file path, HTTP URL, or a basemap name. Defaults to 'TERRAIN'.         right_layer (str, optional): The right tile layer. Can be a local file path, HTTP URL, or a basemap name. Defaults to 'OpenTopoMap'.         left_args (dict, optional): The arguments for the left tile layer. Defaults to {}.         right_args (dict, optional): The arguments for the right tile layer. Defaults to {}.         kwargs (dict, optional): The arguments for the Map widget. Defaults to {}.     \"\"\"      if \"draw_control\" not in kwargs:         kwargs[\"draw_control\"] = False     if \"toolbar_control\" not in kwargs:         kwargs[\"toolbar_control\"] = False     if \"measure_control\" not in kwargs:         kwargs[\"measure_control\"] = False     if \"fullscreen_control\" not in kwargs:         kwargs[\"fullscreen_control\"] = False     if \"scale_control\" not in kwargs:         kwargs[\"scale_control\"] = False     if \"search_control\" not in kwargs:         kwargs[\"search_control\"] = False      m = Map(**kwargs)      if \"max_zoom\" not in left_args:         left_args[\"max_zoom\"] = 30     if \"max_native_zoom\" not in left_args:         left_args[\"max_native_zoom\"] = 30      if \"max_zoom\" not in right_args:         right_args[\"max_zoom\"] = 30     if \"max_native_zoom\" not in right_args:         right_args[\"max_native_zoom\"] = 30      if \"layer_name\" not in left_args:         left_args[\"layer_name\"] = \"Left Layer\"      if \"layer_name\" not in right_args:         right_args[\"layer_name\"] = \"Right Layer\"      bounds = None      try:         if left_layer in basemaps.keys():             left_layer = get_basemap(left_layer)         elif isinstance(left_layer, str):             if left_layer.startswith(\"http\") and left_layer.endswith(\".tif\"):                 url = cog_tile(left_layer, **left_args)                 bbox = cog_bounds(left_layer)                 bounds = [(bbox[1], bbox[0]), (bbox[3], bbox[2])]                 left_layer = ipyleaflet.TileLayer(                     url=url,                     name=\"Left Layer\",                     attribution=\" \",                 )             elif left_layer.startswith(\"http\") and left_layer.endswith(\".geojson\"):                 if \"max_zoom\" in left_args:                     del left_args[\"max_zoom\"]                 if \"max_native_zoom\" in left_args:                     del left_args[\"max_native_zoom\"]                 left_layer = geojson_layer(left_layer, **left_args)             elif os.path.exists(left_layer):                 if left_layer.endswith(\".geojson\"):                     if \"max_zoom\" in left_args:                         del left_args[\"max_zoom\"]                     if \"max_native_zoom\" in left_args:                         del left_args[\"max_native_zoom\"]                     left_layer = geojson_layer(left_layer, **left_args)                 else:                     left_layer, left_client = get_local_tile_layer(                         left_layer,                         tile_format=\"ipyleaflet\",                         return_client=True,                         **left_args,                     )                     bounds = image_bounds(left_client)             else:                 left_layer = ipyleaflet.TileLayer(                     url=left_layer,                     name=\"Left Layer\",                     attribution=\" \",                     **left_args,                 )         elif isinstance(left_layer, ipyleaflet.TileLayer) or isinstance(             left_layer, ipyleaflet.GeoJSON         ):             pass         else:             raise ValueError(                 f\"left_layer must be one of the following: {', '.join(basemaps.keys())} or a string url to a tif file.\"             )          if right_layer in basemaps.keys():             right_layer = get_basemap(right_layer)         elif isinstance(right_layer, str):             if right_layer.startswith(\"http\") and right_layer.endswith(\".tif\"):                 url = cog_tile(                     right_layer,                     **right_args,                 )                 bbox = cog_bounds(right_layer)                 bounds = [(bbox[1], bbox[0]), (bbox[3], bbox[2])]                 right_layer = ipyleaflet.TileLayer(                     url=url,                     name=\"Right Layer\",                     attribution=\" \",                 )             elif right_layer.startswith(\"http\") and right_layer.endswith(\".geojson\"):                 if \"max_zoom\" in right_args:                     del right_args[\"max_zoom\"]                 if \"max_native_zoom\" in right_args:                     del right_args[\"max_native_zoom\"]                 right_layer = geojson_layer(right_layer, **right_args)             elif os.path.exists(right_layer):                 if \"max_zoom\" in right_args:                     del right_args[\"max_zoom\"]                 if \"max_native_zoom\" in right_args:                     del right_args[\"max_native_zoom\"]                 if right_layer.endswith(\".geojson\"):                     right_layer = geojson_layer(right_layer, **right_args)                 else:                     right_layer, right_client = get_local_tile_layer(                         right_layer,                         tile_format=\"ipyleaflet\",                         return_client=True,                         **right_args,                     )                     bounds = image_bounds(right_client)             else:                 right_layer = ipyleaflet.TileLayer(                     url=right_layer,                     name=\"Right Layer\",                     attribution=\" \",                     **right_args,                 )         elif isinstance(right_layer, ipyleaflet.TileLayer) or isinstance(             right_layer, ipyleaflet.GeoJSON         ):             pass         else:             raise ValueError(                 f\"right_layer must be one of the following: {', '.join(basemaps.keys())} or a string url to a tif file.\"             )         control = ipyleaflet.SplitMapControl(             left_layer=left_layer, right_layer=right_layer         )         m.add(control)         if bounds is not None:             m.fit_bounds(bounds)         m.dragging = False         return m      except Exception as e:         print(\"The provided layers are invalid!\")         raise ValueError(e)  In\u00a0[\u00a0]: Copied! <pre>def geojson_layer(\n    in_geojson,\n    layer_name=\"Untitled\",\n    style={},\n    hover_style={},\n    style_callback=None,\n    fill_colors=[\"black\"],\n    encoding=\"utf-8\",\n):\n    \"\"\"Adds a GeoJSON file to the map.\n\n    Args:\n        in_geojson (str | dict): The file path or http URL to the input GeoJSON or a dictionary containing the geojson.\n        layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n        style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.\n        hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n        style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n        fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].\n        info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n        encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".\n\n    Raises:\n        FileNotFoundError: The provided GeoJSON file could not be found.\n    \"\"\"\n    import json\n    import random\n    import requests\n\n    style_callback_only = False\n\n    if len(style) == 0 and style_callback is not None:\n        style_callback_only = True\n\n    try:\n        if isinstance(in_geojson, str):\n            if in_geojson.startswith(\"http\"):\n                in_geojson = github_raw_url(in_geojson)\n                data = requests.get(in_geojson).json()\n            else:\n                in_geojson = os.path.abspath(in_geojson)\n                if not os.path.exists(in_geojson):\n                    raise FileNotFoundError(\n                        \"The provided GeoJSON file could not be found.\"\n                    )\n\n                with open(in_geojson, encoding=encoding) as f:\n                    data = json.load(f)\n        elif isinstance(in_geojson, dict):\n            data = in_geojson\n        else:\n            raise TypeError(\"The input geojson must be a type of str or dict.\")\n    except Exception as e:\n        raise Exception(e)\n\n    if not style:\n        style = {\n            # \"stroke\": True,\n            \"color\": \"#000000\",\n            \"weight\": 1,\n            \"opacity\": 1,\n            # \"fill\": True,\n            # \"fillColor\": \"#ffffff\",\n            \"fillOpacity\": 0.1,\n            # \"dashArray\": \"9\"\n            # \"clickable\": True,\n        }\n    elif \"weight\" not in style:\n        style[\"weight\"] = 1\n\n    if not hover_style:\n        hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}\n\n\n        #### code in toolbar.py\ndef split_basemaps(\n    m,\n    layers_dict: Optional[Dict] = None,\n    left_name=None,\n    right_name=None,\n    width=\"120px\",\n    **kwargs,\n):\n    \"\"\"Create a split-panel map for visualizing two maps.\n\n    Args:\n        m (ipyleaflet.Map): An ipyleaflet map object.\n        layers_dict (dict, optional): A dictionary of TileLayers. Defaults to None.\n        left_name (str, optional): The default value of the left dropdown list. Defaults to None.\n        right_name (str, optional): The default value of the right dropdown list. Defaults to None.\n        width (str, optional): The width of the dropdown list. Defaults to \"120px\".\n    \"\"\"\n    from .basemaps import wms_tiles\n    from .leafmap import basemaps, get_basemap\n\n    controls = m.controls\n    layers = m.layers\n    m.clear_controls()\n\n    add_zoom = True\n    add_fullscreen = True\n\n    if layers_dict is None:\n        keys = []\n        tmp_keys = list(basemaps.keys())\n        for key in tmp_keys:\n            if key not in wms_tiles:\n                keys.append(key)\n    else:\n        keys = list(layers_dict.keys())\n\n    if layers_dict is None:\n        if left_name is None:\n            left_name = \"ROADMAP\"\n        if right_name is None:\n            right_name = \"HYBRID\"\n    else:\n        if left_name is None:\n            left_name = keys[0]\n        if right_name is None:\n            right_name = keys[-1]\n\n    if layers_dict is None:\n        if isinstance(left_name, str):\n            left_layer = get_basemap(left_name)\n\n        if isinstance(right_name, str):\n            right_layer = get_basemap(right_name)\n    else:\n        left_layer = layers_dict[left_name]\n        right_layer = layers_dict[right_name]\n\n    control = ipyleaflet.SplitMapControl(left_layer=left_layer, right_layer=right_layer)\n    m.add(control)\n    m.dragging = False\n\n    left_dropdown = widgets.Dropdown(\n        options=keys, value=left_name, layout=widgets.Layout(width=width)\n    )\n\n    left_control = ipyleaflet.WidgetControl(widget=left_dropdown, position=\"topleft\")\n    m.add(left_control)\n\n    right_dropdown = widgets.Dropdown(\n        options=keys, value=right_name, layout=widgets.Layout(width=width)\n    )\n\n    right_control = ipyleaflet.WidgetControl(widget=right_dropdown, position=\"topright\")\n    m.add(right_control)\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        # button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=\"0px 0px 0px 4px\"),\n    )\n</pre> def geojson_layer(     in_geojson,     layer_name=\"Untitled\",     style={},     hover_style={},     style_callback=None,     fill_colors=[\"black\"],     encoding=\"utf-8\", ):     \"\"\"Adds a GeoJSON file to the map.      Args:         in_geojson (str | dict): The file path or http URL to the input GeoJSON or a dictionary containing the geojson.         layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".         style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.         hover_style (dict, optional): Hover style dictionary. Defaults to {}.         style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.         fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].         info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".         encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".      Raises:         FileNotFoundError: The provided GeoJSON file could not be found.     \"\"\"     import json     import random     import requests      style_callback_only = False      if len(style) == 0 and style_callback is not None:         style_callback_only = True      try:         if isinstance(in_geojson, str):             if in_geojson.startswith(\"http\"):                 in_geojson = github_raw_url(in_geojson)                 data = requests.get(in_geojson).json()             else:                 in_geojson = os.path.abspath(in_geojson)                 if not os.path.exists(in_geojson):                     raise FileNotFoundError(                         \"The provided GeoJSON file could not be found.\"                     )                  with open(in_geojson, encoding=encoding) as f:                     data = json.load(f)         elif isinstance(in_geojson, dict):             data = in_geojson         else:             raise TypeError(\"The input geojson must be a type of str or dict.\")     except Exception as e:         raise Exception(e)      if not style:         style = {             # \"stroke\": True,             \"color\": \"#000000\",             \"weight\": 1,             \"opacity\": 1,             # \"fill\": True,             # \"fillColor\": \"#ffffff\",             \"fillOpacity\": 0.1,             # \"dashArray\": \"9\"             # \"clickable\": True,         }     elif \"weight\" not in style:         style[\"weight\"] = 1      if not hover_style:         hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}           #### code in toolbar.py def split_basemaps(     m,     layers_dict: Optional[Dict] = None,     left_name=None,     right_name=None,     width=\"120px\",     **kwargs, ):     \"\"\"Create a split-panel map for visualizing two maps.      Args:         m (ipyleaflet.Map): An ipyleaflet map object.         layers_dict (dict, optional): A dictionary of TileLayers. Defaults to None.         left_name (str, optional): The default value of the left dropdown list. Defaults to None.         right_name (str, optional): The default value of the right dropdown list. Defaults to None.         width (str, optional): The width of the dropdown list. Defaults to \"120px\".     \"\"\"     from .basemaps import wms_tiles     from .leafmap import basemaps, get_basemap      controls = m.controls     layers = m.layers     m.clear_controls()      add_zoom = True     add_fullscreen = True      if layers_dict is None:         keys = []         tmp_keys = list(basemaps.keys())         for key in tmp_keys:             if key not in wms_tiles:                 keys.append(key)     else:         keys = list(layers_dict.keys())      if layers_dict is None:         if left_name is None:             left_name = \"ROADMAP\"         if right_name is None:             right_name = \"HYBRID\"     else:         if left_name is None:             left_name = keys[0]         if right_name is None:             right_name = keys[-1]      if layers_dict is None:         if isinstance(left_name, str):             left_layer = get_basemap(left_name)          if isinstance(right_name, str):             right_layer = get_basemap(right_name)     else:         left_layer = layers_dict[left_name]         right_layer = layers_dict[right_name]      control = ipyleaflet.SplitMapControl(left_layer=left_layer, right_layer=right_layer)     m.add(control)     m.dragging = False      left_dropdown = widgets.Dropdown(         options=keys, value=left_name, layout=widgets.Layout(width=width)     )      left_control = ipyleaflet.WidgetControl(widget=left_dropdown, position=\"topleft\")     m.add(left_control)      right_dropdown = widgets.Dropdown(         options=keys, value=right_name, layout=widgets.Layout(width=width)     )      right_control = ipyleaflet.WidgetControl(widget=right_dropdown, position=\"topright\")     m.add(right_control)      close_button = widgets.ToggleButton(         value=False,         tooltip=\"Close the tool\",         icon=\"times\",         # button_style=\"primary\",         layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=\"0px 0px 0px 4px\"),     ) In\u00a0[\u00a0]: Copied! <pre>def add_netcdf(\n        self,\n        filename,\n        variables=None,\n        palette=None,\n        vmin=None,\n        vmax=None,\n        nodata=None,\n        attribution=None,\n        layer_name=\"NetCDF layer\",\n        shift_lon=True,\n        lat=\"lat\",\n        lon=\"lon\",\n        lev=\"lev\",\n        level_index=0,\n        time=0,\n        **kwargs,\n    ):\n        \"\"\"Generate an ipyleaflet/folium TileLayer from a netCDF file.\n            If you are using this function in JupyterHub on a remote server (e.g., Binder, Microsoft Planetary Computer),\n            try adding to following two lines to the beginning of the notebook if the raster does not render properly.\n\n            import os\n            os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = f'{os.environ['JUPYTERHUB_SERVICE_PREFIX'].lstrip('/')}/proxy/{{port}}'\n\n        Args:\n            filename (str): File path or HTTP URL to the netCDF file.\n            variables (int, optional): The variable/band names to extract data from the netCDF file. Defaults to None. If None, all variables will be extracted.\n            port (str, optional): The port to use for the server. Defaults to \"default\".\n            palette (str, optional): The name of the color palette from `palettable` to use when plotting a single band. See https://jiffyclub.github.io/palettable. Default is greyscale\n            vmin (float, optional): The minimum value to use when colormapping the palette when plotting a single band. Defaults to None.\n            vmax (float, optional): The maximum value to use when colormapping the palette when plotting a single band. Defaults to None.\n            nodata (float, optional): The value from the band to use to interpret as not valid data. Defaults to None.\n            attribution (str, optional): Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.\n            layer_name (str, optional): The layer name to use. Defaults to \"netCDF layer\".\n            shift_lon (bool, optional): Flag to shift longitude values from [0, 360] to the range [-180, 180]. Defaults to True.\n            lat (str, optional): Name of the latitude variable. Defaults to 'lat'.\n            lon (str, optional): Name of the longitude variable. Defaults to 'lon'.\n            lev (str, optional): Name of the level variable. Defaults to 'lev'.\n            level_index (int, optional): Index of level to use. Defaults to 0'.\n            time (int, optional): Index of time to use. Defaults to 0'.\n        \"\"\"\n\n        tif, vars = netcdf_to_tif(\n            filename,\n            shift_lon=shift_lon,\n            lat=lat,\n            lon=lon,\n            lev=lev,\n            level_index=level_index,\n            time=time,\n            return_vars=True,\n        )\n\n        if variables is None:\n            if len(vars) &gt;= 3:\n                band_idx = [1, 2, 3]\n            else:\n                band_idx = [1]\n        else:\n            if not set(variables).issubset(set(vars)):\n                raise ValueError(f\"The variables must be a subset of {vars}.\")\n            else:\n                band_idx = [vars.index(v) + 1 for v in variables]\n\n        self.add_raster(\n            tif,\n            band=band_idx,\n            palette=palette,\n            vmin=vmin,\n            vmax=vmax,\n            nodata=nodata,\n            attribution=attribution,\n            layer_name=layer_name,\n            **kwargs,\n        )\n</pre> def add_netcdf(         self,         filename,         variables=None,         palette=None,         vmin=None,         vmax=None,         nodata=None,         attribution=None,         layer_name=\"NetCDF layer\",         shift_lon=True,         lat=\"lat\",         lon=\"lon\",         lev=\"lev\",         level_index=0,         time=0,         **kwargs,     ):         \"\"\"Generate an ipyleaflet/folium TileLayer from a netCDF file.             If you are using this function in JupyterHub on a remote server (e.g., Binder, Microsoft Planetary Computer),             try adding to following two lines to the beginning of the notebook if the raster does not render properly.              import os             os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = f'{os.environ['JUPYTERHUB_SERVICE_PREFIX'].lstrip('/')}/proxy/{{port}}'          Args:             filename (str): File path or HTTP URL to the netCDF file.             variables (int, optional): The variable/band names to extract data from the netCDF file. Defaults to None. If None, all variables will be extracted.             port (str, optional): The port to use for the server. Defaults to \"default\".             palette (str, optional): The name of the color palette from `palettable` to use when plotting a single band. See https://jiffyclub.github.io/palettable. Default is greyscale             vmin (float, optional): The minimum value to use when colormapping the palette when plotting a single band. Defaults to None.             vmax (float, optional): The maximum value to use when colormapping the palette when plotting a single band. Defaults to None.             nodata (float, optional): The value from the band to use to interpret as not valid data. Defaults to None.             attribution (str, optional): Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.             layer_name (str, optional): The layer name to use. Defaults to \"netCDF layer\".             shift_lon (bool, optional): Flag to shift longitude values from [0, 360] to the range [-180, 180]. Defaults to True.             lat (str, optional): Name of the latitude variable. Defaults to 'lat'.             lon (str, optional): Name of the longitude variable. Defaults to 'lon'.             lev (str, optional): Name of the level variable. Defaults to 'lev'.             level_index (int, optional): Index of level to use. Defaults to 0'.             time (int, optional): Index of time to use. Defaults to 0'.         \"\"\"          tif, vars = netcdf_to_tif(             filename,             shift_lon=shift_lon,             lat=lat,             lon=lon,             lev=lev,             level_index=level_index,             time=time,             return_vars=True,         )          if variables is None:             if len(vars) &gt;= 3:                 band_idx = [1, 2, 3]             else:                 band_idx = [1]         else:             if not set(variables).issubset(set(vars)):                 raise ValueError(f\"The variables must be a subset of {vars}.\")             else:                 band_idx = [vars.index(v) + 1 for v in variables]          self.add_raster(             tif,             band=band_idx,             palette=palette,             vmin=vmin,             vmax=vmax,             nodata=nodata,             attribution=attribution,             layer_name=layer_name,             **kwargs,         ) In\u00a0[\u00a0]: Copied! <pre>def add_time_slider(\n        self,\n        layers={},\n        labels=None,\n        time_interval=1,\n        position=\"bottomright\",\n        slider_length=\"150px\",\n        zoom_to_layer=False,\n        **kwargs,\n    ):\n        \"\"\"Adds a time slider to the map.\n\n        Args:\n            layers (dict, optional): The dictionary containing a set of XYZ tile layers.\n            labels (list, optional): The list of labels to be used for the time series. Defaults to None.\n            time_interval (int, optional): Time interval in seconds. Defaults to 1.\n            position (str, optional): Position to place the time slider, can be any of ['topleft', 'topright', 'bottomleft', 'bottomright']. Defaults to \"bottomright\".\n            slider_length (str, optional): Length of the time slider. Defaults to \"150px\".\n            zoom_to_layer (bool, optional): Whether to zoom to the extent of the selected layer. Defaults to False.\n\n        \"\"\"\n        from .toolbar import time_slider\n\n        time_slider(\n            self,\n            layers,\n            labels,\n            time_interval,\n            position,\n            slider_length,\n            zoom_to_layer,\n            **kwargs,\n        )\n\n        ###toolbar.py code\n\n        def time_slider(\n    m,\n    layers: Optional[Union[Dict, List, str]] = None,\n    labels: Optional[List] = None,\n    time_interval: Optional[int] = 1,\n    position: Optional[str] = \"bottomright\",\n    slider_length: Optional[str] = \"150px\",\n    zoom_to_layer: Optional[bool] = False,\n    **kwargs,\n):\n    \"\"\"Adds a time slider to the map.\n\n    Args:\n        layers (dict, optional): The dictionary containing a set of XYZ tile layers.\n        labels (list, optional): The list of labels to be used for the time series. Defaults to None.\n        time_interval (int, optional): Time interval in seconds. Defaults to 1.\n        position (str, optional): Position to place the time slider, can be any of ['topleft', 'topright', 'bottomleft', 'bottomright']. Defaults to \"bottomright\".\n        slider_length (str, optional): Length of the time slider. Defaults to \"150px\".\n        zoom_to_layer (bool, optional): Whether to zoom to the extent of the layer. Defaults to False.\n\n    \"\"\"\n    import time\n    import threading\n\n    bounds = None\n\n    if isinstance(layers, str):\n        layers = find_files(layers, ext=\"*.tif\", recursive=False)\n\n    if isinstance(layers, list):\n        if zoom_to_layer:\n            layer0 = layers[0]\n            _, tile_client = get_local_tile_layer(\n                layer0,\n                return_client=True,\n            )\n\n            bounds = tile_client.bounds()  # [ymin, ymax, xmin, xmax]\n            bounds = (\n                bounds[2],\n                bounds[0],\n                bounds[3],\n                bounds[1],\n            )  # [minx, miny, maxx, maxy]\n            m.zoom_to_bounds(bounds)\n\n        layers = images_to_tiles(layers, names=labels, **kwargs)\n\n    if not isinstance(layers, dict):\n        raise TypeError(\"The layers must be a dictionary.\")\n\n    if len(layers) == 0:\n        layers = planet_monthly_tiles()\n\n    if labels is None:\n        labels = list(layers.keys())\n    if len(labels) != len(layers):\n        raise ValueError(\"The length of labels is not equal to that of layers.\")\n\n    slider = widgets.IntSlider(\n        min=1,\n        max=len(labels),\n        readout=False,\n        continuous_update=False,\n        layout=widgets.Layout(width=slider_length),\n    )\n    label = widgets.Label(\n        value=labels[0], layout=widgets.Layout(padding=\"0px 5px 0px 5px\")\n    )\n\n    play_btn = widgets.Button(\n        icon=\"play\",\n        tooltip=\"Play the time slider\",\n        button_style=\"primary\",\n        layout=widgets.Layout(width=\"32px\"),\n    )\n\n    pause_btn = widgets.Button(\n        icon=\"pause\",\n        tooltip=\"Pause the time slider\",\n        button_style=\"primary\",\n        layout=widgets.Layout(width=\"32px\"),\n    )\n\n    close_btn = widgets.Button(\n        icon=\"times\",\n        tooltip=\"Close the time slider\",\n        button_style=\"primary\",\n        layout=widgets.Layout(width=\"32px\"),\n    )\n\n    play_chk = widgets.Checkbox(value=False)\n\n    slider_widget = widgets.HBox([label, slider, play_btn, pause_btn, close_btn])\n\n    def play_click(b):\n        play_chk.value = True\n\n        def work(slider):\n            while play_chk.value:\n                if slider.value &lt; len(labels):\n                    slider.value += 1\n                else:\n                    slider.value = 1\n                time.sleep(time_interval)\n\n        thread = threading.Thread(target=work, args=(slider,))\n        thread.start()\n\n    def pause_click(b):\n        play_chk.value = False\n\n    play_btn.on_click(play_click)\n    pause_btn.on_click(pause_click)\n\n    keys = list(layers.keys())\n    layer = layers[keys[0]]\n    m.add(layer)\n\n    def slider_changed(change):\n        m.default_style = {\"cursor\": \"wait\"}\n        index = slider.value - 1\n        label.value = labels[index]\n        layer.url = layers[label.value].url\n        layer.name = layers[label.value].name\n        m.default_style = {\"cursor\": \"default\"}\n\n    slider.observe(slider_changed, \"value\")\n\n    def close_click(b):\n        play_chk.value = False\n        m.toolbar_reset()\n\n        if m.slider_ctrl is not None and m.slider_ctrl in m.controls:\n            m.remove_control(m.slider_ctrl)\n        slider_widget.close()\n\n    close_btn.on_click(close_click)\n\n    slider_ctrl = ipyleaflet.WidgetControl(widget=slider_widget, position=position)\n    m.add(slider_ctrl)\n    m.slider_ctrl = slider_ctrl\n</pre> def add_time_slider(         self,         layers={},         labels=None,         time_interval=1,         position=\"bottomright\",         slider_length=\"150px\",         zoom_to_layer=False,         **kwargs,     ):         \"\"\"Adds a time slider to the map.          Args:             layers (dict, optional): The dictionary containing a set of XYZ tile layers.             labels (list, optional): The list of labels to be used for the time series. Defaults to None.             time_interval (int, optional): Time interval in seconds. Defaults to 1.             position (str, optional): Position to place the time slider, can be any of ['topleft', 'topright', 'bottomleft', 'bottomright']. Defaults to \"bottomright\".             slider_length (str, optional): Length of the time slider. Defaults to \"150px\".             zoom_to_layer (bool, optional): Whether to zoom to the extent of the selected layer. Defaults to False.          \"\"\"         from .toolbar import time_slider          time_slider(             self,             layers,             labels,             time_interval,             position,             slider_length,             zoom_to_layer,             **kwargs,         )          ###toolbar.py code          def time_slider(     m,     layers: Optional[Union[Dict, List, str]] = None,     labels: Optional[List] = None,     time_interval: Optional[int] = 1,     position: Optional[str] = \"bottomright\",     slider_length: Optional[str] = \"150px\",     zoom_to_layer: Optional[bool] = False,     **kwargs, ):     \"\"\"Adds a time slider to the map.      Args:         layers (dict, optional): The dictionary containing a set of XYZ tile layers.         labels (list, optional): The list of labels to be used for the time series. Defaults to None.         time_interval (int, optional): Time interval in seconds. Defaults to 1.         position (str, optional): Position to place the time slider, can be any of ['topleft', 'topright', 'bottomleft', 'bottomright']. Defaults to \"bottomright\".         slider_length (str, optional): Length of the time slider. Defaults to \"150px\".         zoom_to_layer (bool, optional): Whether to zoom to the extent of the layer. Defaults to False.      \"\"\"     import time     import threading      bounds = None      if isinstance(layers, str):         layers = find_files(layers, ext=\"*.tif\", recursive=False)      if isinstance(layers, list):         if zoom_to_layer:             layer0 = layers[0]             _, tile_client = get_local_tile_layer(                 layer0,                 return_client=True,             )              bounds = tile_client.bounds()  # [ymin, ymax, xmin, xmax]             bounds = (                 bounds[2],                 bounds[0],                 bounds[3],                 bounds[1],             )  # [minx, miny, maxx, maxy]             m.zoom_to_bounds(bounds)          layers = images_to_tiles(layers, names=labels, **kwargs)      if not isinstance(layers, dict):         raise TypeError(\"The layers must be a dictionary.\")      if len(layers) == 0:         layers = planet_monthly_tiles()      if labels is None:         labels = list(layers.keys())     if len(labels) != len(layers):         raise ValueError(\"The length of labels is not equal to that of layers.\")      slider = widgets.IntSlider(         min=1,         max=len(labels),         readout=False,         continuous_update=False,         layout=widgets.Layout(width=slider_length),     )     label = widgets.Label(         value=labels[0], layout=widgets.Layout(padding=\"0px 5px 0px 5px\")     )      play_btn = widgets.Button(         icon=\"play\",         tooltip=\"Play the time slider\",         button_style=\"primary\",         layout=widgets.Layout(width=\"32px\"),     )      pause_btn = widgets.Button(         icon=\"pause\",         tooltip=\"Pause the time slider\",         button_style=\"primary\",         layout=widgets.Layout(width=\"32px\"),     )      close_btn = widgets.Button(         icon=\"times\",         tooltip=\"Close the time slider\",         button_style=\"primary\",         layout=widgets.Layout(width=\"32px\"),     )      play_chk = widgets.Checkbox(value=False)      slider_widget = widgets.HBox([label, slider, play_btn, pause_btn, close_btn])      def play_click(b):         play_chk.value = True          def work(slider):             while play_chk.value:                 if slider.value &lt; len(labels):                     slider.value += 1                 else:                     slider.value = 1                 time.sleep(time_interval)          thread = threading.Thread(target=work, args=(slider,))         thread.start()      def pause_click(b):         play_chk.value = False      play_btn.on_click(play_click)     pause_btn.on_click(pause_click)      keys = list(layers.keys())     layer = layers[keys[0]]     m.add(layer)      def slider_changed(change):         m.default_style = {\"cursor\": \"wait\"}         index = slider.value - 1         label.value = labels[index]         layer.url = layers[label.value].url         layer.name = layers[label.value].name         m.default_style = {\"cursor\": \"default\"}      slider.observe(slider_changed, \"value\")      def close_click(b):         play_chk.value = False         m.toolbar_reset()          if m.slider_ctrl is not None and m.slider_ctrl in m.controls:             m.remove_control(m.slider_ctrl)         slider_widget.close()      close_btn.on_click(close_click)      slider_ctrl = ipyleaflet.WidgetControl(widget=slider_widget, position=position)     m.add(slider_ctrl)     m.slider_ctrl = slider_ctrl  In\u00a0[\u00a0]: Copied! <pre>def handle_interaction: # think of as a call back function\n</pre> def handle_interaction: # think of as a call back function"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[\u00a0]: Copied! <pre>import thebeans\n</pre> import thebeans In\u00a0[\u00a0]: Copied! <pre>from thebeans import CSVtoDF\n</pre> from thebeans import CSVtoDF In\u00a0[\u00a0]: Copied! <pre>csv = \"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\"\ndf = CSVtoDF.csv_to_df(csv)\ndf\n</pre> csv = \"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\" df = CSVtoDF.csv_to_df(csv) df"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import thebeans.foliummap as thebeans\n\nm = thebeans.Map(center=[40, -100], zoom=4)\nurl = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\"\nm.add_raster(url, name=\"SRTM90\", opacity=0.5)\nm\n</pre> import thebeans.foliummap as thebeans  m = thebeans.Map(center=[40, -100], zoom=4) url = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\" m.add_raster(url, name=\"SRTM90\", opacity=0.5) m Out[1]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>m.save(\"raster.html\")\n</pre> m.save(\"raster.html\")"},{"location":"examples/pysheds/","title":"Pysheds","text":"In\u00a0[\u00a0]: Copied! <pre>import numpy as np\nimport pandas as pd\nfrom pysheds.grid import Grid\nimport geopandas as gpd\nfrom shapely import geometry, ops\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport seaborn as sns\nimport rasterio\n\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set_palette('husl')\n\n\n# 1m nodata blank\n# 10m nodata blank\n# 30m nodata -999999\n</pre> import numpy as np import pandas as pd from pysheds.grid import Grid import geopandas as gpd from shapely import geometry, ops import matplotlib.pyplot as plt import matplotlib.colors as colors import seaborn as sns import rasterio  %matplotlib inline  import warnings warnings.filterwarnings('ignore') sns.set_palette('husl')   # 1m nodata blank # 10m nodata blank # 30m nodata -999999 In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>grid = Grid.from_raster(r\"C:\\Users\\phill\\Desktop\\GEOG424\\rasters\\USGS_30m.tif\", data_name='dem', no_data = -999999)\ndem = grid.read_raster(r\"C:\\Users\\phill\\Desktop\\GEOG424\\rasters\\USGS_30m.tif\")\n#data type dictates nodata value, if no assigned no data value no data is 0, assign nodata value or get errors\n\n#check dtype\ndem.dtype\n</pre> grid = Grid.from_raster(r\"C:\\Users\\phill\\Desktop\\GEOG424\\rasters\\USGS_30m.tif\", data_name='dem', no_data = -999999) dem = grid.read_raster(r\"C:\\Users\\phill\\Desktop\\GEOG424\\rasters\\USGS_30m.tif\") #data type dictates nodata value, if no assigned no data value no data is 0, assign nodata value or get errors  #check dtype dem.dtype In\u00a0[\u00a0]: Copied! <pre>fig, ax = plt.subplots(figsize=(8,8))\nplt.imshow(grid.view(dem), extent=grid.extent, cmap='terrain', zorder=1)\nplt.colorbar(label='Elevation (m)')\nplt.title('Digital elevation map')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\n</pre> fig, ax = plt.subplots(figsize=(8,8)) plt.imshow(grid.view(dem), extent=grid.extent, cmap='terrain', zorder=1) plt.colorbar(label='Elevation (m)') plt.title('Digital elevation map') plt.xlabel('Longitude') plt.ylabel('Latitude') In\u00a0[\u00a0]: Copied! <pre>#Surface conditioning, fills pits, fills depressions, resolves flats (pit, flood, inflate)\n\n#not empty, just sparse\npits_detect = grid.detect_pits(dem)\n\n\n#fill fits, check for pits, error if pits\nfillpit = grid.fill_pits(dem)\npits_detect = grid.detect_pits(fillpit)\nassert not pits_detect.any()\n\n\n#dep_detect shows depressions in areas expected\nfilldepp = grid.fill_depressions(fillpit)\ndep_detect = grid.detect_depressions(filldepp)\nassert not dep_detect.any()\n\n#Fill flats. Assert throwing error, likely flats in data\nnoflats = grid.resolve_flats(filldepp, eps=1e-12, max_iter=1e9) #eps and max_iter too small for large flats\nflats_detect = grid.detect_flats(noflats)\n# assert not flats_detect.any()\n</pre> #Surface conditioning, fills pits, fills depressions, resolves flats (pit, flood, inflate)  #not empty, just sparse pits_detect = grid.detect_pits(dem)   #fill fits, check for pits, error if pits fillpit = grid.fill_pits(dem) pits_detect = grid.detect_pits(fillpit) assert not pits_detect.any()   #dep_detect shows depressions in areas expected filldepp = grid.fill_depressions(fillpit) dep_detect = grid.detect_depressions(filldepp) assert not dep_detect.any()  #Fill flats. Assert throwing error, likely flats in data noflats = grid.resolve_flats(filldepp, eps=1e-12, max_iter=1e9) #eps and max_iter too small for large flats flats_detect = grid.detect_flats(noflats) # assert not flats_detect.any()    In\u00a0[\u00a0]: Copied! <pre># fig, ax = plt.subplots(figsize=(8,8))\n# ax.imshow(dep_detect, cmap='cubehelix', zorder=1)\n# ax.set_yticklabels([])\n# ax.set_xticklabels([])\n# plt.title('Depressions', size=14)\n</pre> # fig, ax = plt.subplots(figsize=(8,8)) # ax.imshow(dep_detect, cmap='cubehelix', zorder=1) # ax.set_yticklabels([]) # ax.set_xticklabels([]) # plt.title('Depressions', size=14) In\u00a0[\u00a0]: Copied! <pre>dirmap = (64, 128, 1, 2, 4, 8, 16, 32)\n\n#flow direction D8\nfdir = grid.flowdir(noflats, dirmap=dirmap)\n\n#flow accumulation\nacc = grid.accumulation(fdir)\n</pre> dirmap = (64, 128, 1, 2, 4, 8, 16, 32)  #flow direction D8 fdir = grid.flowdir(noflats, dirmap=dirmap)  #flow accumulation acc = grid.accumulation(fdir)   In\u00a0[\u00a0]: Copied! <pre>fig = plt.figure(figsize=(8,6))\nfig.patch.set_alpha(0)\n\nplt.imshow(fdir, extent=grid.extent, cmap='viridis', zorder=2)\nboundaries = ([0] + sorted(list(dirmap)))\nplt.colorbar(boundaries= boundaries,\n             values=sorted(dirmap))\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.title('Flow direction grid', size=14)\nplt.grid(zorder=-1)\nplt.tight_layout()\n</pre> fig = plt.figure(figsize=(8,6)) fig.patch.set_alpha(0)  plt.imshow(fdir, extent=grid.extent, cmap='viridis', zorder=2) boundaries = ([0] + sorted(list(dirmap))) plt.colorbar(boundaries= boundaries,              values=sorted(dirmap)) plt.xlabel('Longitude') plt.ylabel('Latitude') plt.title('Flow direction grid', size=14) plt.grid(zorder=-1) plt.tight_layout() In\u00a0[\u00a0]: Copied! <pre>fig, ax = plt.subplots(figsize=(8,6))\nfig.patch.set_alpha(0)\nim = ax.imshow(acc, zorder=2,\n               cmap='cubehelix',\n               norm=colors.LogNorm(1, acc.max()),\n               interpolation='bilinear')\nplt.colorbar(im, ax=ax, label='Upstream Cells')\nplt.title('Flow Accumulation', size=14)\nplt.tight_layout()\n</pre> fig, ax = plt.subplots(figsize=(8,6)) fig.patch.set_alpha(0) im = ax.imshow(acc, zorder=2,                cmap='cubehelix',                norm=colors.LogNorm(1, acc.max()),                interpolation='bilinear') plt.colorbar(im, ax=ax, label='Upstream Cells') plt.title('Flow Accumulation', size=14) plt.tight_layout() In\u00a0[\u00a0]: Copied! <pre>#pour point\nx, y = -119.912764, 48.049753\n\n# Snap pour point to high accumulation cell\nx_snap, y_snap = grid.snap_to_mask(acc &gt; 10000, (x, y))\n\ncatch = grid.catchment(x=x_snap, y=y_snap, fdir=fdir, dirmap=dirmap)\n</pre> #pour point x, y = -119.912764, 48.049753  # Snap pour point to high accumulation cell x_snap, y_snap = grid.snap_to_mask(acc &gt; 10000, (x, y))  catch = grid.catchment(x=x_snap, y=y_snap, fdir=fdir, dirmap=dirmap) In\u00a0[\u00a0]: Copied! <pre>catch_view = grid.view(catch)\n</pre> catch_view = grid.view(catch) In\u00a0[\u00a0]: Copied! <pre>fig, ax = plt.subplots(figsize=(8,6))\nfig.patch.set_alpha(0)\n\nplt.grid('on', zorder=0)\nim = ax.imshow(np.where(catch_view, catch_view, np.nan), extent=grid.extent,\n               zorder=1, cmap='Greys_r')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.title('Delineated Catchment', size=14)\n</pre> fig, ax = plt.subplots(figsize=(8,6)) fig.patch.set_alpha(0)  plt.grid('on', zorder=0) im = ax.imshow(np.where(catch_view, catch_view, np.nan), extent=grid.extent,                zorder=1, cmap='Greys_r') plt.xlabel('Longitude') plt.ylabel('Latitude') plt.title('Delineated Catchment', size=14)"},{"location":"examples/quickstart/","title":"Quickstart","text":"In\u00a0[\u00a0]: Copied! <pre>pip install thebeans\n\n##Uncomment if running in colab\n# !pip install --upgrade pip\n# !pip install 'localtileserver[jupyter]&gt;=0.7.1'\n</pre> pip install thebeans  ##Uncomment if running in colab # !pip install --upgrade pip # !pip install 'localtileserver[jupyter]&gt;=0.7.1' In\u00a0[\u00a0]: Copied! <pre>#Import thebeans and initiate a map object.\n\nimport thebeans\n\nm = thebeans.Map()\n\nm\n</pre> #Import thebeans and initiate a map object.  import thebeans  m = thebeans.Map()  m In\u00a0[\u00a0]: Copied! <pre>#Checkout toolbar and map widget navigation aids.\n\nm.add_toolbar() \nm.add_latlong_widget()\n</pre> #Checkout toolbar and map widget navigation aids.  m.add_toolbar()  m.add_latlong_widget() In\u00a0[\u00a0]: Copied! <pre>#Explore map functionality tools\n\nm.add_opacity_slider(position= \"topleft\")\nm.add_zoom_slider()\nm.add_basemap(\"Esri.WorldImagery\")\n</pre> #Explore map functionality tools  m.add_opacity_slider(position= \"topleft\") m.add_zoom_slider() m.add_basemap(\"Esri.WorldImagery\") In\u00a0[\u00a0]: Copied! <pre>#Add rasters and images to the map through the map object.\n\nm.add_raster(\"https://github.com/phillipslucas/databeans/releases/download/v0.0.1/cub30int.tif\")\n# m.add_image()\n# m.add_tile_layer()\n\nm\n</pre> #Add rasters and images to the map through the map object.  m.add_raster(\"https://github.com/phillipslucas/databeans/releases/download/v0.0.1/cub30int.tif\") # m.add_image() # m.add_tile_layer()  m In\u00a0[\u00a0]: Copied! <pre>#Add vectors to the map through the map object.\n\nm.add_vector(\"https://github.com/phillipslucas/databeans/releases/download/v0.0.1/StudyBox.geojson\")\n# m.add_shp()\n# m.add_geojson()\n</pre> #Add vectors to the map through the map object.  m.add_vector(\"https://github.com/phillipslucas/databeans/releases/download/v0.0.1/StudyBox.geojson\") # m.add_shp() # m.add_geojson()  In\u00a0[\u00a0]: Copied! <pre>#Casually create a hydrologic network and visualize the outputs in matplotlib plots.\n\n\nm.add_casual_hydrologic_network()\n</pre> #Casually create a hydrologic network and visualize the outputs in matplotlib plots.   m.add_casual_hydrologic_network()"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[\u00a0]: Copied! <pre>import thebeans\n</pre> import thebeans In\u00a0[\u00a0]: Copied! <pre>m = thebeans.Map()\nm\n</pre> m = thebeans.Map() m In\u00a0[\u00a0]: Copied! <pre>#Image path, image boundary coordinates, center of coordinates for map\n\n#url = \"https://i.imgur.com/06Q1fSz.png\" #image\nurl = \"https://media1.tenor.com/m/OvhgywxIZsYAAAAC/daniel-ricciardo-honey-badger.gif\" #gif image\nbounds = ((32, -130), (13, -100))\ncenter = ((bounds[0][0]+ bounds[1][0])/2, (bounds[0][1]+ bounds[1][1])/2)\n\nm = thebeans.Map(center = center, zoom = 4)\nm.add_image(url, bounds)\nm\n</pre> #Image path, image boundary coordinates, center of coordinates for map  #url = \"https://i.imgur.com/06Q1fSz.png\" #image url = \"https://media1.tenor.com/m/OvhgywxIZsYAAAAC/daniel-ricciardo-honey-badger.gif\" #gif image bounds = ((32, -130), (13, -100)) center = ((bounds[0][0]+ bounds[1][0])/2, (bounds[0][1]+ bounds[1][1])/2)  m = thebeans.Map(center = center, zoom = 4) m.add_image(url, bounds) m In\u00a0[\u00a0]: Copied! <pre>from localtileserver import TileClient, get_leaflet_tile_layer, examples\nfrom ipyleaflet import Map\n\n# C/P raster path.\nclient = TileClient(\"https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif\")\n\n# Create ipyleaflet TileLayer from that server\nt = get_leaflet_tile_layer(client)\n\n# Create ipyleaflet map, add tile layer, and display\nm = Map(center=client.center(), zoom=client.default_zoom)\nm.add(t)\nm\n</pre> from localtileserver import TileClient, get_leaflet_tile_layer, examples from ipyleaflet import Map  # C/P raster path. client = TileClient(\"https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif\")  # Create ipyleaflet TileLayer from that server t = get_leaflet_tile_layer(client)  # Create ipyleaflet map, add tile layer, and display m = Map(center=client.center(), zoom=client.default_zoom) m.add(t) m"},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[3]: Copied! <pre>import json\nfrom ipyleaflet import Map, GeoJSON\n\nwith open(\"StudyArea.geojson\", \"r\") as f:\n    data = json.load(f)\n\nm = Map(center=(48.513,-120.218), zoom=6)\n\ngeo_json = GeoJSON(\n    data=data,\n)\nm.add(geo_json)\n\nm\n</pre> import json from ipyleaflet import Map, GeoJSON  with open(\"StudyArea.geojson\", \"r\") as f:     data = json.load(f)  m = Map(center=(48.513,-120.218), zoom=6)  geo_json = GeoJSON(     data=data, ) m.add(geo_json)  m Out[3]: <pre>Map(center=[48.513, -120.218], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zo\u2026</pre> In\u00a0[1]: Copied! <pre>import thebeans\n</pre> import thebeans In\u00a0[6]: Copied! <pre>m = thebeans.Map()\nm.add_basemap(\"OpenTopoMap\")\n\nm.add_geojson(\"StudyArea.geojson\", name=\"Study Area\")\nm.add_shp(\"CedarCubMuck.shp\", name=\"Burn Scars\")\nm.add_layers_control()\nm\n</pre> m = thebeans.Map() m.add_basemap(\"OpenTopoMap\")  m.add_geojson(\"StudyArea.geojson\", name=\"Study Area\") m.add_shp(\"CedarCubMuck.shp\", name=\"Burn Scars\") m.add_layers_control() m Out[6]: <pre>Map(center=[48.513, -120.218], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zo\u2026</pre>"},{"location":"examples/whitebox/","title":"Whitebox","text":"In\u00a0[\u00a0]: Copied! <pre>import whitebox\n</pre> import whitebox"}]}